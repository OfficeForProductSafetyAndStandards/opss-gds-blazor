@inherits BunitContext

@code {
    [Fact]
    public void OutputsBackLink()
    {
        // Arrange
        var component = Render(@<GdsBackLink Href="#"></GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link">
        Back
    </a>
        );
    }

    [Fact]
    public void OutputsBackLinkWithHref()
    {
        // Arrange
        var href = "/page/";
        var component = Render(@<GdsBackLink Href=@href></GdsBackLink>);

        component.MarkupMatches(
    @<a href=@href class="govuk-back-link">
        Back
    </a>
        );
    }

    [Fact]
    public void OutputsBackLinkWithContent()
    {
        // Arrange
        var component = Render(@<GdsBackLink Href="#">Go Back</GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link">
        Go Back
    </a>
        );
    }

    [Fact]
    public void OutputsBackLinkWithAdditionalClass()
    {
        // Arrange
        var customClass = "custom-back";
        var component = Render(@<GdsBackLink Href="#" Classes=@customClass></GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link @customClass">
        Back
    </a>
    );
    }

    [Fact]
    public void OutputsBackLinkWithDataTestId()
    {
        // Arrange
        var dataTestId = "custom-back";
        var component = Render(@<GdsBackLink Href="#" DataTestId=@dataTestId></GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link" data-testId="@dataTestId">
        Back
    </a>
    );
    }

    [Fact]
    public void OutputsBackLinkWithAdditionalAttributes()
    {
        // Arrange
        var customAttributes = new Dictionary<string, object>
        {
            {"aria-label", "Hello"}
        };
        var component = Render(@<GdsBackLink Href="#" Attributes=@customAttributes></GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link" aria-label="Hello">
        Back
    </a>
        );
    }

    [Fact]
    public void OutputsBackLinkWithDarkBackground()
    {
        // Arrange
        var component = Render(@<GdsBackLink Href="#" IsOnDarkBackground=@true></GdsBackLink>);

        component.MarkupMatches(
    @<a href="#" class="govuk-back-link govuk-back-link--inverse">
        Back
    </a>
        );
    }
}
