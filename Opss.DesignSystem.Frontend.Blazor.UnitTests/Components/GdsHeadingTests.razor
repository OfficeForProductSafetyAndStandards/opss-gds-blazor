@inherits BunitContext

@code {

    [Fact]
    public void OutputsHeading1()
    {
        // Arrange
        var component = Render(@<GdsHeading DataTestId="GdsHeading" HeadingLevel="1" Classes="@GdsHeadingClasses.Large">govuk-heading-l</GdsHeading>);

        component.MarkupMatches(
    @<h1 class="govuk-heading-l" data-testid="GdsHeading">govuk-heading-l</h1>
        );
    }

    [Fact]
    public void OutputsHeading2()
    {
        // Arrange
        var component = Render(@<GdsHeading HeadingLevel="2" Classes="@GdsHeadingClasses.Medium">govuk-heading-m
            </GdsHeading>);

        component.MarkupMatches(
            @<h2 class="govuk-heading-m">govuk-heading-m</h2>
        );
    }

    [Fact]
    public void OutputsHeading3()
    {
        // Arrange
        var component = Render(@<GdsHeading HeadingLevel="3" Classes="@GdsHeadingClasses.Small">govuk-heading-s</GdsHeading>);

        component.MarkupMatches(
            @<h3 class="govuk-heading-s">govuk-heading-s</h3>
        );
    }

    [Fact]
    public void OutputsHeading1WithCaption()
    {
        // Arrange
        var component = Render(
            @<GdsHeading HeadingLevel="1" Classes="@GdsHeadingClasses.Large">
                <GdsCaption Classes="@GdsCaptionClasses.Large">govuk-caption-l</GdsCaption>
                govuk-heading-l
            </GdsHeading>);

        component.MarkupMatches(
            @<h1 class="govuk-heading-l">
                <span class="govuk-caption-l">govuk-caption-l</span>
                govuk-heading-l
            </h1>
        );
    }

    [Fact]
    public void OutputsHeading4()
    {
        // Arrange
        var component = Render(@<GdsHeading HeadingLevel="4" Classes="@GdsHeadingClasses.Small">govuk-heading-s</GdsHeading>);

        component.MarkupMatches(
            @<h4 class="govuk-heading-s">govuk-heading-s</h4>
        );
    }

    [Fact]
    public void ThrowsErrorForInvalidHeadingLevel()
    {
        // Act & Assert
        var exception = Assert.Throws<ArgumentException>(() =>
        {
            Render(@<GdsHeading HeadingLevel="7" Classes="@GdsHeadingClasses.Large">Invalid Heading</GdsHeading>);
        });

        Assert.Equal("HeadingLevel must be between 1 and 6 (Parameter 'HeadingLevel')", exception.Message);
    }

    [Fact]
    public void OutputsHeading5()
    {
        // Arrange
        var component = Render(@<GdsHeading HeadingLevel="5" Classes="@GdsHeadingClasses.Small">govuk-heading-s</GdsHeading>);

        component.MarkupMatches(
            @<h5 class="govuk-heading-s">govuk-heading-s</h5>
        );
    }

    [Fact]
    public void OutputsHeading6()
    {
        // Arrange
        var component = Render(@<GdsHeading HeadingLevel="6" Classes="@GdsHeadingClasses.Small">govuk-heading-s</GdsHeading>);

        component.MarkupMatches(
            @<h6 class="govuk-heading-s">govuk-heading-s</h6>
        );
    }

    [Fact]
    public void ThrowsErrorForEmptyHeadingContent()
    {
        // Act & Assert
        var exception = Assert.Throws<ArgumentNullException>(() =>
        {
            Render(@<GdsHeading HeadingLevel="1" Classes="@GdsHeadingClasses.Large"></GdsHeading>);
        });

        Assert.Equal("ChildContent cannot be null (Parameter 'ChildContent')", exception.Message);
    }


}
