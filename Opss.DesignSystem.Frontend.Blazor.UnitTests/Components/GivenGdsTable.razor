@inherits BunitContext

@code {
    [Fact]
    public void WhenHeaderAndRowsTemplatesIsSet_ThenOutputsTableWithHeaderAndRows()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable DataTestId="GdsTable">
        <HeadTemplate>
            <GdsTableCell DataTestId="GdsTableCell">Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow DataTestId="GdsTableRow">
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table" data-testid="GdsTable">
    <thead class="govuk-table__head">
            <tr class="govuk-table__row">
            <th scope="col" class="govuk-table__header" data-testid="GdsTableCell">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
                <th scope="col" class="govuk-table__header">Heading 3</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
        <tr class="govuk-table__row" data-testid="GdsTableRow">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">41</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">52</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenHeaderAndRowsTemplatesIsSet_WithFirstCellIsHeader_ThenOutputsTableWithHeaderAndRowsAndRowHeaders()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable FirstCellIsHeader>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row Header</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row Header</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
                <th scope="col" class="govuk-table__header">Heading 3</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Row Header</th>
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">41</td>
            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Row Header</th>
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">52</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenHeaderAndRowsTemplatesIsSet_WithCaptionText_ThenOutputsTableWithHeaderAndRowsAndCaption()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable CaptionText="Test Caption Text">
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <caption class="govuk-table__caption">Test Caption Text</caption>
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">41</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">52</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenHeaderAndRowsTemplatesIsSet_WithCaptionTextAndClasses_ThenOutputsTableWithHeaderAndRowsAndCaptionAndCaptionClass()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable CaptionText="Test Caption Text" CaptionTextClasses="captionclass1 captionclass2">
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <caption class="govuk-table__caption captionclass1 captionclass2">Test Caption Text</caption>
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">41</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">52</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenRowsTemplatesIsSet_WithNoHeader_ThenOutputsTableWithNoHeaders()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Headless Row</GdsTableCell>
                <GdsTableCell>331</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Headless Row</GdsTableCell>
                <GdsTableCell>332</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Headless Row</td>
                <td class="govuk-table__cell">331</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Headless Row</td>
                <td class="govuk-table__cell">332</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenATableCellHasARowspanSet_ThenOutputsTableWithARowspan()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
            <GdsTableCell>Heading 4</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell RowSpan="3">Content spanning 3 rows</GdsTableCell>
                <GdsTableCell>Content 1</GdsTableCell>
                <GdsTableCell>£300</GdsTableCell>
                <GdsTableCell>41.1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Content 2</GdsTableCell>
                <GdsTableCell>£600</GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Content 3</GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
                <GdsTableCell>41.3</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 4</GdsTableCell>
                <GdsTableCell>Content 4</GdsTableCell>
                <GdsTableCell>£1,200</GdsTableCell>
                <GdsTableCell>41.4</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
                <th scope="col" class="govuk-table__header">Heading 3</th>
                <th scope="col" class="govuk-table__header">Heading 4</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell" rowspan="3">Content spanning 3 rows</td>
                <td class="govuk-table__cell">Content 1</td>
                <td class="govuk-table__cell">£300</td>
                <td class="govuk-table__cell">41.1</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Content 2</td>
                <td class="govuk-table__cell">£600</td>
                <td class="govuk-table__cell">41.2</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Content 3</td>
                <td class="govuk-table__cell">£900</td>
                <td class="govuk-table__cell">41.3</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 4</td>
                <td class="govuk-table__cell">Content 4</td>
                <td class="govuk-table__cell">£1,200</td>
                <td class="govuk-table__cell">41.4</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenATableCellHasAColspanSet_ThenOutputsTableWithAColspan()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
            <GdsTableCell>Heading 4</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row 1</GdsTableCell>
                <GdsTableCell ColSpan="3">Content spanning 3 columns</GdsTableCell>
                <GdsTableCell>£300</GdsTableCell>
                <GdsTableCell>41.1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 2</GdsTableCell>
                <GdsTableCell>£600</GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 3</GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
                <GdsTableCell>41.3</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 4</GdsTableCell>
                <GdsTableCell>Content 4</GdsTableCell>
                <GdsTableCell>£1,200</GdsTableCell>
                <GdsTableCell>41.4</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Heading 1</th>
                <th scope="col" class="govuk-table__header">Heading 2</th>
                <th scope="col" class="govuk-table__header">Heading 3</th>
                <th scope="col" class="govuk-table__header">Heading 4</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 1</td>
                <td colspan="3" class="govuk-table__cell">Content spanning 3 columns</td>
                <td class="govuk-table__cell">£300</td>
                <td class="govuk-table__cell">41.1</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 2</td>
                <td class="govuk-table__cell">£600</td>
                <td class="govuk-table__cell">41.2</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 3</td>
                <td class="govuk-table__cell">£900</td>
                <td class="govuk-table__cell">41.3</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 4</td>
                <td class="govuk-table__cell">Content 4</td>
                <td class="govuk-table__cell">£1,200</td>
                <td class="govuk-table__cell">41.4</td>
            </tr>
        </tbody>
    </table>
        );
    }
   
    [Fact]
    public void WhenTableCellsHaveHtmlMarkup_ThenOutputsTableWithHtmlContentInCells()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell><GdsHeading Classes=@GdsHeadingClasses.Small HeadingLevel="3">Heading 1 at 3</GdsHeading></GdsTableCell>
            <GdsTableCell><u>Heading 2</u></GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell><GdsLink Href="#">Row 1 link</GdsLink></GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell><GdsTag Classes=@GdsTagClasses.Blue>Row 2</GdsTag></GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 3 </GdsTableCell>
                <GdsTableCell><p>Content 4</p></GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header"><h3 class=@GdsHeadingClasses.Small>Heading 1 at 3</h3></th>
                <th scope="col" class="govuk-table__header"><u>Heading 2</u></th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <td class="govuk-table__cell"><a class="govuk-link" href="#">Row 1 link</a></td>
                <td class="govuk-table__cell">41.2</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell"><strong class="govuk-tag @GdsTagClasses.Blue">Row 2</strong></td>
                <td class="govuk-table__cell">£900</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row 3</td>
                <td class="govuk-table__cell"><p>Content 4</p></td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenVariousClassesAreSet_ThenOutputsTableWithTheVariousClasses()
    {
        var tableClass = "tableClass";
        var headerClass = "headerClass";
        var rowClass = "rowClass";
        var cellClass = "cellClass";

        // Arrange, Act
        var component = Render(
    @<GdsTable Classes=@tableClass>
        <HeadTemplate>
            <GdsTableCell Classes=@headerClass>Heading</GdsTableCell>
            <GdsTableCell>Heading</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow Classes=@rowClass>
                <GdsTableCell Classes=@cellClass>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class=@("govuk-table " + @tableClass)>
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class=@("govuk-table__header " + @headerClass)>Heading</th>
                <th scope="col" class="govuk-table__header">Heading</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            <tr class=@("govuk-table__row " + @rowClass)>
                <td class=@("govuk-table__cell " + @cellClass)>Row</td>
                <td class="govuk-table__cell">Row</td>
            </tr>
            <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class="govuk-table__cell">Row</td>
            </tr>
        </tbody>
    </table>
        );
    }

    [Fact]
    public void WhenATableCellHasNumericFormattingSet_ThenOutputsTableWithNumericCellClasses()
    {
        var headerClass = "headerClass";
        var cellClass = "cellClass";

        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell Classes=@headerClass>Heading</GdsTableCell>
            <GdsTableCell Format=@GdsTableCellFormat.Numeric>Heading</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell Format=@GdsTableCellFormat.Numeric>12</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell Classes=@cellClass Format=@GdsTableCellFormat.Numeric>345</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
    @<table class="govuk-table">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class=@("govuk-table__header " + @headerClass)>Heading</th>
            <th scope="col" class="govuk-table__header govuk-table__header--numeric">Heading</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
		    <tr class="govuk-table__row">
			    <td class="govuk-table__cell">Row</td>
            <td class="govuk-table__cell govuk-table__cell--numeric" >12</td>
		    </tr>
		    <tr class="govuk-table__row">
                <td class="govuk-table__cell">Row</td>
                <td class=@("govuk-table__cell " +  @cellClass + " govuk-table__cell--numeric")>345</td>
            </tr>
        </tbody>
    </table>
        );
    }
}
