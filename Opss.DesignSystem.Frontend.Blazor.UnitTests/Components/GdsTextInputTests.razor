@inherits BunitContext

<h3>Given a TextInput</h3>

@code {
    [Fact]
    public void WhenNoOptionsSet_ThenOutputsMinimumMarkup()
    {
        // Arrange
        var component = Render(@<GdsTextInput></GdsTextInput>);

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input" type="text">
    </div>
        );
    }
    
    [Fact]
    public void WhenAllOptionsSet_ThenOutputsFullMarkup()
    {
        // Arrange
        var attrs = new Dictionary<string, object> { { "attr1", "value1" } };
        var component = Render(
            @<GdsTextInput
                 Id="all"
                 Name="all"
                 Classes="some-css"
                 Attributes=@attrs
                 Inputmode="something"
                 Value="a value"
                 Disabled="true"
                 DescribedBy="element2"
                 FormGroupClasses="form-group-css"
                 FormGroupAttributes=@attrs
                 Autocomplete="yes please"
                 Pattern="regex"
                 Spellcheck="true"
                 Autocapitalize="ok"
                 InputWrapperClasses="input-wrapper-classes"
                               DataTestId="GdsTextInput"
                               InputDataTestId="InputTestId"></GdsTextInput>);
        
        component.MarkupMatches(
	@<div class="govuk-form-group  form-group-css" attr1="value1"
				  	data-testid="GdsTextInput">
                <input id="all" 
                    class="govuk-input some-css " 
                    name="all" type="text" 
                    spellcheck="true" 
                    aria-describedby="element2" 
                    autocomplete="yes please" 
                    pattern="regex" 
                    inputmode="something" 
                    value="a value" 
                    disabled="" 
                    autocapitalize="ok" 
                    attr1="value1"
               data-testid="InputTestId">
            </div>
        );
    }

    [Fact]
    public void WhenClassesSetToTextInputWidth_ThenSetsCorrectly()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="width-10"
                       Name="width10"
                       Classes="@TextInputWidth.Width10">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input govuk-input--width-10" id="width-10" name="width10" type="text">
    </div>
    );
    }


    [Fact]
    public void WhenClassesSetToLayoutWidth_ThenSetsCorrectly()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="three-quarters"
                       Name="threeQuarters"
                       Classes="@LayoutWidth.ThreeQuarters">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input govuk-!-width-three-quarters" id="three-quarters" name="threeQuarters" type="text">
    </div>
    );
    }

    [Fact]
    public void WhenValueSet_ThenRendersWithValue()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="authentication-code"
                       Name="authenticationCode"
                       Classes=@(@TextInputWidth.Width5 + " " + @TextInputLettering.ExtraLetterWidth)
                       Value="NC1701"
                       Spellcheck="@false">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input govuk-input--width-5 govuk-input--extra-letter-spacing" id="authentication-code" name="authenticationCode" type="text" spellcheck="false" value="NC1701">
    </div>
    );
    }

    [Fact]
    public void WhenBothPrefixAndSuffixSet_ThenRendersBothAndSetsInputWrapperClasses()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="cost-per-item"
                       Name="costPerItem"
                       Classes="@TextInputWidth.Width5"
                       Spellcheck="@false" 
                       InputWrapperClasses="input-wrapper-classes">
        <PrefixTemplate>
            <GdsPrefix>�</GdsPrefix>
        </PrefixTemplate>
        <SuffixTemplate>
            <GdsSuffix>per item</GdsSuffix>
        </SuffixTemplate>
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <div class="govuk-input__wrapper input-wrapper-classes">
            <div class="govuk-input__prefix" aria-hidden="true">�</div>
            <input class="govuk-input govuk-input--width-5" id="cost-per-item" name="costPerItem" type="text" spellcheck="false">
            <div class="govuk-input__suffix" aria-hidden="true">per item</div>
        </div>
    </div>
    );
    }

    [Fact]
    public void WhenPrefixSet_ThenRendersPrefixAndSetsInputWrapperClasses()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="cost"
                       Name="cost"
                       Classes="@TextInputWidth.Width5"
                       spellcheck="@false"
                       InputWrapperClasses="input-wrapper-classes">
        <PrefixTemplate>
            <GdsPrefix>�</GdsPrefix>
        </PrefixTemplate>
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <div class="govuk-input__wrapper input-wrapper-classes">
            <div class="govuk-input__prefix" aria-hidden="true">�</div>
            <input class="govuk-input govuk-input--width-5" id="cost" name="cost" type="text" spellcheck="false">
        </div>
    </div>
    );
    }

    [Fact]
    public void WhenSuffixSet_ThenRendersSuffixAndSetsInputWrapperClasses()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="weight"
                       Name="weight"
                       Classes="@TextInputWidth.Width5"
                       spellcheck="@false"
                       InputWrapperClasses="input-wrapper-classes">
        <SuffixTemplate>
            <GdsSuffix>kg</GdsSuffix>
        </SuffixTemplate>
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <div class="govuk-input__wrapper input-wrapper-classes">
            <input class="govuk-input govuk-input--width-5" id="weight" name="weight" type="text" spellcheck="false">
            <div class="govuk-input__suffix" aria-hidden="true">kg</div>
        </div>
    </div>
    );
    }

    [Fact]
    public void WhenSpellcheckFalse_ThenSetsToFalse()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="reference-number"
                       Name="referenceNumber"
                       Spellcheck="false">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input" id="reference-number" name="referenceNumber" type="text" spellcheck="false">
    </div>
    );
    }

    [Fact]
    public void WhenSpellcheckTrue_ThenSetsToTrue()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="details"
                       Name="details"
                       Spellcheck="true">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input" id="details" name="details" type="text" spellcheck="true">
    </div>
    );
    }

    [Fact]
    public void WhenSpellcheckNotSet_ThenNoSpellcheckRendered()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="details"
                       Name="details">
    </GdsTextInput>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input" id="details" name="details" type="text">
    </div>
        );
    }

    [Fact]
    public void WhenSpellcheckNotSetAndInputmodeIsNumeric_ThenSpellcheckIsFalse()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="details"
                       Name="details"
                       Inputmode="numeric">
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <input class="govuk-input" id="details" name="details" type="text" inputmode="numeric" spellcheck="false">
    </div>
    );
    }

    [Fact]
    public void WhenHintTemplateSet_ThenRendersHintTextAndSetsAriaDescribedBy()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="event-name"
                       Name="eventName">
        <HintTemplate>
            <GdsHint>The name you�ll use on promotional material</GdsHint>
        </HintTemplate>
    </GdsTextInput>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <div id="event-name-hint" class="govuk-hint">
            The name you�ll use on promotional material
        </div>
        <input class="govuk-input" id="event-name" name="eventName" type="text" aria-describedby="event-name-hint">
    </div>
        );
    }

    [Fact]
    public void WhenErrorTemplateSet_ThenRendersErrorTemplateAndSetsDescribedBy()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="event-name"
                       Name="eventName">
        <ErrorMessageTemplate>
            <GdsErrorMessage>Enter an event name</GdsErrorMessage>
        </ErrorMessageTemplate>
    </GdsTextInput>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <p id="event-name-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> Enter an event name
        </p>
        <input class="govuk-input govuk-input--error" id="event-name" name="eventName" type="text" aria-describedby="event-name-error">
    </div>
        );
    }

    [Fact]
    public void WhenErrorTemplateAndHintTemplateSet_ThenRendersErrorTemplateAndHintTemplateAndSetsDescribedBy()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="event-name"
                       Name="eventName">
        <HintTemplate>
            <GdsHint>The name you�ll use on promotional material</GdsHint>
        </HintTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>Enter an event name</GdsErrorMessage>
        </ErrorMessageTemplate>
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <div id="event-name-hint" class="govuk-hint">
            The name you�ll use on promotional material
        </div>
        <p id="event-name-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> Enter an event name
        </p>
        <input class="govuk-input govuk-input--error" id="event-name" name="eventName" type="text" aria-describedby="event-name-hint event-name-error">
    </div>
    );
    }

    [Fact]
    public void WhenAllTemplatesSet_RendersAllTemplates()
    {
        // Arrange
        var component = Render(
    @<GdsTextInput Id="cost-per-item-error"
                       Name="costPerItemError"
                       Classes="@TextInputWidth.Width5"
                       spellcheck="@false">
        <LabelTemplate>
            <GdsLabel Classes="@LabelSize.Large"
                      IsPageHeading="true">
                What is the cost per item, in pounds?
            </GdsLabel>
        </LabelTemplate>
        <PrefixTemplate>
            <GdsPrefix>�</GdsPrefix>
        </PrefixTemplate>
        <SuffixTemplate>
            <GdsSuffix>per item</GdsSuffix>
        </SuffixTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                Enter a cost per item, in pounds
            </GdsErrorMessage>
        </ErrorMessageTemplate>
		<HintTemplate>
			<GdsHint>
				The cost per item is the price of each item
			</GdsHint>
		</HintTemplate>
    </GdsTextInput>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <h1 class="govuk-label-wrapper">
            <label class="govuk-label govuk-label--l" for="cost-per-item-error">
                What is the cost per item, in pounds?
            </label>
        </h1>
        <div id="cost-per-item-error-hint" class="govuk-hint">
            The cost per item is the price of each item
        </div>
        <p id="cost-per-item-error-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> Enter a cost per item, in pounds
        </p>
        <div class="govuk-input__wrapper">
            <div class="govuk-input__prefix" aria-hidden="true">�</div>
            <input class="govuk-input govuk-input--width-5 govuk-input--error" id="cost-per-item-error" name="costPerItemError" type="text" spellcheck="false" aria-describedby="cost-per-item-error-hint cost-per-item-error-error">
            <div class="govuk-input__suffix" aria-hidden="true">per item</div>
        </div>
    </div>
    );
    }

    [Fact]
    public void WhenEventHandlerSetAndEventTriggered_ThenHandlerCalled()
    {
        // Arrange
        var expectedValue = "this is a new value";
		var actualValue = string.Empty;
        var component = Render<GdsTextInput>(builder => builder.Add(input => input.ValueChanged, val => actualValue = val));

        // Act
		component.Find("input").Input(expectedValue);

		// Assert
		Assert.Equal(expectedValue, actualValue);
    }
}
