@inherits BunitContext

@code {
    [Fact]
    public void WhenMinimumRequiredParametersAreSet_ThenOutputsCollapsedButtonMenu()
    {
        // Arrange
        var component = Render(@<GdsButtonMenu MenuTitle="Menu title"></GdsButtonMenu>);

        component.MarkupMatches(
            @<div>
                <div class="moj-button-menu" data-module="moj-button-menu">
                    <button class="govuk-button moj-button-menu__toggle-button govuk-button--secondary" type="submit" data-module="govuk-button" aria-haspopup="true" aria-expanded="false">
                        <span>
                            Menu title
                            <svg width="11" height="5" viewBox="0 0 11 5" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 0L11 5L0 5L5.5 0Z" fill="currentColor"></path>
                            </svg>
                        </span>
                    </button>
                </div>
            </div>
        );
    }

    [Fact]
    public void WhenMenuItemsNotExpanded_ThenOutputsCollapsedButtonMenu()
    {
        // Arrange
        var component = Render(
            @<GdsButtonMenu MenuTitle="Menu title" DataTestId="GdsButtonMenu" MenuTitleButtonDataTestId="MenuTitleButton">
                <GdsButtonMenuItem Classes=@GdsButtonClasses.Secondary>Menu item 1</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 2</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 3</GdsButtonMenuItem>
            </GdsButtonMenu>
        );

        component.MarkupMatches(
            @<div>
                <div class="moj-button-menu" data-module="moj-button-menu" data-testid="GdsButtonMenu">
                    <button class="govuk-button moj-button-menu__toggle-button govuk-button--secondary" type="submit" data-module="govuk-button" data-testid="MenuTitleButton" aria-haspopup="true" aria-expanded="false">
                        <span>
                            Menu title
                            <svg width="11" height="5" viewBox="0 0 11 5" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 0L11 5L0 5L5.5 0Z" fill="currentColor"></path>
                            </svg>
                        </span>
                    </button>
                </div>
            </div>
        );
    }

    [Fact]
    public void WhenMenuTitleButtonClicked_ThenOutputsExpandedButtonMenu()
    {
        // Arrange
        var component = Render(
            @<GdsButtonMenu MenuTitle="Menu title" DataTestId="GdsButtonMenu" MenuTitleButtonDataTestId="MenuTitleButton">
                <GdsButtonMenuItem Href="#">Menu item 1</GdsButtonMenuItem>
                <GdsButtonMenuItem Href="#" Classes=@GdsButtonClasses.Secondary>Menu item 2</GdsButtonMenuItem>
                <GdsButtonMenuItem Href="#" Classes=@GdsButtonClasses.Secondary>Menu item 3</GdsButtonMenuItem>
            </GdsButtonMenu>
        );

        // Act 
        var button = component.Find("[data-testid=MenuTitleButton]");
        button.Click(new());

        // Assert
        component.MarkupMatches(
            @<div>
                <div class="moj-button-menu" data-module="moj-button-menu" data-testid="GdsButtonMenu">
                    <button class="govuk-button moj-button-menu__toggle-button govuk-button--secondary" type="submit" data-module="govuk-button" data-testid="MenuTitleButton" aria-haspopup="true" aria-expanded="true">
                        <span>
                            Menu title
                            <svg width="11" height="5" viewBox="0 0 11 5" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 0L11 5L0 5L5.5 0Z" fill="currentColor"></path>
                            </svg>
                        </span>
                    </button>
                    <ul role="list" class="moj-button-menu__wrapper">
                        <li>
                            <a class="govuk-button moj-button-menu__item" href="#" role="button" data-module="govuk-button" draggable="false">Menu item 1</a>
                        </li>
                        <li>
                            <a class="govuk-button moj-button-menu__item govuk-button--secondary" href="#" role="button" data-module="govuk-button" draggable="false">Menu item 2</a>
                        </li>
                        <li>
                            <a class="govuk-button moj-button-menu__item govuk-button--secondary" href="#" role="button" data-module="govuk-button" draggable="false">Menu item 3</a>
                        </li>
                    </ul>
		        </div>
            </div>
        );
    }

    [Fact]
    public void WhenRightAlignMenuIsSet_ThenOutputsButtonMenuInRightAlignedState()
    {
        // Arrange
        var component = Render(
            @<GdsButtonMenu MenuTitle="Menu title" MenuTitleButtonDataTestId="MenuTitleButton" RightAlignMenu>
                <GdsButtonMenuItem Classes=@GdsButtonClasses.Secondary>Menu item 1</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 2</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 3</GdsButtonMenuItem>
            </GdsButtonMenu>
        );

        var button = component.Find("[data-testid=MenuTitleButton]");
        button.Click(new());

        // Act
        // Assert
        component.MarkupMatches(
            @<div class="button-menu-align--right">
                <div class="moj-button-menu" data-module="moj-button-menu">
                    <button class="govuk-button moj-button-menu__toggle-button govuk-button--secondary" type="submit" data-module="govuk-button" data-testid="MenuTitleButton" aria-haspopup="true" aria-expanded="true">
                        <span>
                            Menu title
                            <svg width="11" height="5" viewBox="0 0 11 5" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 0L11 5L0 5L5.5 0Z" fill="currentColor"></path>
                            </svg>
                        </span>
                    </button>
                    <ul role="list" class="moj-button-menu__wrapper moj-button-menu__wrapper--right">
                        <li>
                            <button class="govuk-button moj-button-menu__item govuk-button--secondary" type="submit" data-module="govuk-button">Menu item 1</button>
                        </li>
                        <li>
                            <button class="govuk-button moj-button-menu__item govuk-button--secondary" type="submit" data-module="govuk-button">Menu item 2</button>
                        </li>
                        <li>
                            <button class="govuk-button moj-button-menu__item govuk-button--secondary" type="submit" data-module="govuk-button">Menu item 3</button>
                        </li>
                    </ul>
                </div>
            </div>
        );
    }

    [Fact]
    public void WhenMenuTitleButtonClassesIsSet_ThenOutputsClassesOnMenuTitleButton()
    {
        // Arrange
        var component = Render(
            @<GdsButtonMenu MenuTitle="Menu title" MenuTitleButtonDataTestId="MenuTitleButton" MenuTitleButtonClasses=@(GdsButtonClasses.Warning + " other-class")>
                <GdsButtonMenuItem Classes=@GdsButtonClasses.Secondary>Menu item 1</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 2</GdsButtonMenuItem>
                <GdsButtonMenuItem Type="submit" Classes=@GdsButtonClasses.Secondary>Menu item 3</GdsButtonMenuItem>
            </GdsButtonMenu>
        );

        // Act
        // Assert
        component.MarkupMatches(
            @<div>
                <div class="moj-button-menu" data-module="moj-button-menu">
                    <button class="govuk-button moj-button-menu__toggle-button govuk-button--warning other-class" type="submit" data-module="govuk-button" data-testid="MenuTitleButton" aria-haspopup="true" aria-expanded="false">
                        <span>
                            Menu title
                            <svg width="11" height="5" viewBox="0 0 11 5" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 0L11 5L0 5L5.5 0Z" fill="currentColor"></path>
                            </svg>
                        </span>
                    </button>
                </div>
            </div>
        );
    }

    [Fact]
    public void WhenNoParametersSet_ThenThrowsException()
    {
        Assert.Throws<ArgumentNullException>(
        "MenuTitle",
        () => Render(
            @<GdsButtonMenu></GdsButtonMenu>
        ));
    }

    //MenuTitleButtonClasses
    //
}
