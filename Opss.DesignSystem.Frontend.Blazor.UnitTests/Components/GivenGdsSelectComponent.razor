@inherits BunitContext

@code {
    [Fact]
    public void ThenOutputsSelect()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="sort" Name="sort">
        <LabelTemplate>
            <GdsLabel>Sort by</GdsLabel>
        </LabelTemplate>
        <ChildContent>
            <GdsSelectOption Value="published">Recently published</GdsSelectOption>
            <GdsSelectOption Value="updated" Selected=@true>Recently updated</GdsSelectOption>
            <GdsSelectOption Value="views">Most views</GdsSelectOption>
            <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <label class="govuk-label" for="sort">
            Sort by
        </label>
        <select class="govuk-select" id="sort" name="sort">
            <option value="published">Recently published</option>
            <option value="updated" selected>Recently updated</option>
            <option value="views">Most views</option>
            <option value="comments">Most comments</option>
        </select>
    </div>
        );
    }

    [Fact]
    public void WhenHintTemplateAndLabelTemplateIsSet_ThenOutputsSelectWithHintAndLabel()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="location" Name="location">
        <LabelTemplate>
            <GdsLabel>Choose location</GdsLabel>
        </LabelTemplate>
        <HintTemplate>
            <GdsHint>This can be different to where you went before</GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsSelectOption Value="choose" Selected=@true>Choose location</GdsSelectOption>
            <GdsSelectOption Value="eastmidlands">East Midlands</GdsSelectOption>
            <GdsSelectOption Value="eastofengland">East of England</GdsSelectOption>
            <GdsSelectOption Value="london">London</GdsSelectOption>
            <GdsSelectOption Value="northeast">North East</GdsSelectOption>
            <GdsSelectOption Value="northwest">North West</GdsSelectOption>
            <GdsSelectOption Value="southeast">South East</GdsSelectOption>
            <GdsSelectOption Value="southwest">South West</GdsSelectOption>
            <GdsSelectOption Value="westmidlands">West Midlands</GdsSelectOption>
            <GdsSelectOption Value="yorkshire">Yorkshire and the Humber</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <label class="govuk-label" for="location">
            Choose location
        </label>
        <div id="location-hint" class="govuk-hint">
            This can be different to where you went before
        </div>
        <select class="govuk-select" id="location" name="location" aria-describedby="location-hint">
            <option value="choose" selected>Choose location</option>
            <option value="eastmidlands">East Midlands</option>
            <option value="eastofengland">East of England</option>
            <option value="london">London</option>
            <option value="northeast">North East</option>
            <option value="northwest">North West</option>
            <option value="southeast">South East</option>
            <option value="southwest">South West</option>
            <option value="westmidlands">West Midlands</option>
            <option value="yorkshire">Yorkshire and the Humber</option>
        </select>
    </div>
        );
    }

    [Fact]
    public void WhenErrorMessageTemplateIsSet_ThenOutputsSelectWithErrorMessage()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="location" Name="location">
        <LabelTemplate>
            <GdsLabel>Choose location</GdsLabel>
        </LabelTemplate>
        <HintTemplate>
            <GdsHint>This can be different to where you went before</GdsHint>
        </HintTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>Select a location</GdsErrorMessage>
        </ErrorMessageTemplate>
        <ChildContent>
            <GdsSelectOption Value="choose" Selected=@true>Choose location</GdsSelectOption>
            <GdsSelectOption Value="eastmidlands">East Midlands</GdsSelectOption>
            <GdsSelectOption Value="eastofengland">East of England</GdsSelectOption>
            <GdsSelectOption Value="london">London</GdsSelectOption>
            <GdsSelectOption Value="northeast">North East</GdsSelectOption>
            <GdsSelectOption Value="northwest">North West</GdsSelectOption>
            <GdsSelectOption Value="southeast">South East</GdsSelectOption>
            <GdsSelectOption Value="southwest">South West</GdsSelectOption>
            <GdsSelectOption Value="westmidlands">West Midlands</GdsSelectOption>
            <GdsSelectOption Value="yorkshire">Yorkshire and the Humber</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <label class="govuk-label" for="location">
            Choose location
        </label>
        <div id="location-hint" class="govuk-hint">
            This can be different to where you went before
        </div>
        <p id="location-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> Select a location
        </p>
        <select class="govuk-select govuk-select--error" id="location" name="location" aria-describedby="location-hint location-error">
            <option value="choose" selected>Choose location</option>
            <option value="eastmidlands">East Midlands</option>
            <option value="eastofengland">East of England</option>
            <option value="london">London</option>
            <option value="northeast">North East</option>
            <option value="northwest">North West</option>
            <option value="southeast">South East</option>
            <option value="southwest">South West</option>
            <option value="westmidlands">West Midlands</option>
            <option value="yorkshire">Yorkshire and the Humber</option>
        </select>
    </div>
        );
    }

    [Fact]
    public void WhenBeforeInputTemplateIsSet_ThenOutputsContentBeforeTheSelect()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="sort" Name="sort">
        <LabelTemplate>
            <GdsLabel>Sort by</GdsLabel>
        </LabelTemplate>
        <BeforeInputTemplate>
            <p class="govuk-body">Content before the select inputs</p>
        </BeforeInputTemplate>
        <ChildContent>
            <GdsSelectOption Value="published">Recently published</GdsSelectOption>
            <GdsSelectOption Value="updated" Selected=@true>Recently updated</GdsSelectOption>
            <GdsSelectOption Value="views">Most views</GdsSelectOption>
            <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <label class="govuk-label" for="sort">
            Sort by
        </label>
        <p class="govuk-body">Content before the select inputs</p>
        <select class="govuk-select" id="sort" name="sort">
            <option value="published">Recently published</option>
            <option value="updated" selected>Recently updated</option>
            <option value="views">Most views</option>
            <option value="comments">Most comments</option>
        </select>
    </div>
        );
    }

    [Fact]
    public void WhenAfterInputTemplateIsSet_ThenOutputsContentAfterTheSelect()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="sort" Name="sort">
        <LabelTemplate>
            <GdsLabel>Sort by</GdsLabel>
        </LabelTemplate>
        <AfterInputTemplate>
            <p class="govuk-body">Content after the select inputs</p>
        </AfterInputTemplate>
        <ChildContent>
            <GdsSelectOption Value="published">Recently published</GdsSelectOption>
            <GdsSelectOption Value="updated" Selected=@true>Recently updated</GdsSelectOption>
            <GdsSelectOption Value="views">Most views</GdsSelectOption>
            <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <label class="govuk-label" for="sort">
            Sort by
        </label>
        <select class="govuk-select" id="sort" name="sort">
            <option value="published">Recently published</option>
            <option value="updated" selected>Recently updated</option>
            <option value="views">Most views</option>
            <option value="comments">Most comments</option>
        </select>
        <p class="govuk-body">Content after the select inputs</p>
    </div>
        );
    }

    [Fact]
    public void WhenDescribedByIsSet_ThenOutputsSelectWithDescribedBy()
    {
        // Arrange
        var component = Render(
    @<GdsSelect Id="sort" Name="sort" DescribedBy="default-sort-order">
        <LabelTemplate>
            <GdsLabel>Sort by</GdsLabel>
        </LabelTemplate>
        <ChildContent>
            <GdsSelectOption Value="published">Recently published</GdsSelectOption>
            <GdsSelectOption Value="updated" Selected=@true>Recently updated</GdsSelectOption>
            <GdsSelectOption Value="views">Most views</GdsSelectOption>
            <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
        </ChildContent>
    </GdsSelect>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <label class="govuk-label" for="sort">
            Sort by
        </label>
        <select class="govuk-select" id="sort" name="sort" aria-describedby="default-sort-order">
            <option value="published">Recently published</option>
            <option value="updated" selected>Recently updated</option>
            <option value="views">Most views</option>
            <option value="comments">Most comments</option>
        </select>
    </div>
        );
    }

    [Fact]
    public void WhenValueIsSet_ThenOutputsSelectWithMatchingOptionSelected()
    {
        // Arrange
        var component = Render(
        @<GdsSelect Id="sort" Name="sort" Value="views">
            <LabelTemplate>
                <GdsLabel>Sort by</GdsLabel>
            </LabelTemplate>
            <ChildContent>
                <GdsSelectOption Value="published">Recently published</GdsSelectOption>
                <GdsSelectOption Value="updated">Recently updated</GdsSelectOption>
                <GdsSelectOption Value="views">Most views</GdsSelectOption>
                <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
            </ChildContent>
        </GdsSelect>
        );

        component.MarkupMatches(
        @<div class="govuk-form-group">
            <label class="govuk-label" for="sort">
                Sort by
            </label>
            <select class="govuk-select" id="sort" name="sort">
                <option value="published">Recently published</option>
                <option value="updated">Recently updated</option>
                <option value="views" selected>Most views</option>
                <option value="comments">Most comments</option>
            </select>
        </div>
    );
    }

    [Fact]
    public void WhenValueChangedIsSet_ThenSpecifiedEventIsTriggeredOnSelect()
    {
        // Arrange
        var currentValue = string.Empty;

        var component = Render(
            @<GdsSelect Id="sort" Name="sort" Value="updated" ValueChanged=@((value) => currentValue = value)>
                <LabelTemplate>
                    <GdsLabel>Sort by</GdsLabel>
                </LabelTemplate>
                <ChildContent>
                    <GdsSelectOption Value="published">Recently published</GdsSelectOption>
                    <GdsSelectOption Value="updated">Recently updated</GdsSelectOption>
                    <GdsSelectOption Value="views">Most views</GdsSelectOption>
                    <GdsSelectOption Value="comments">Most comments</GdsSelectOption>
                </ChildContent>
            </GdsSelect>
        );

        // Act
        component
            .Find("select")
            .Change("comments");

        // Assert 
        Assert.Equal("comments", currentValue);

        // Act
        component
            .Find("select")
            .Change("views");

        // Assert
        Assert.Equal("views", currentValue);
    }


}
