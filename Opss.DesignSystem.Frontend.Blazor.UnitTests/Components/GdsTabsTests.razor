@inherits BunitContext

@code {
    [Fact]
    public void RendersContent()
    {
        // Arrange
        var title = "some title";
        var classes = "class1 class2";
        var attributes = new Dictionary<string, object>
        {
            { "attr1", "value1" },
            { "attr2", "value2" },
        };
        
        // Act
        var component = Render(
            @<GdsTabs Title="@title" Classes="@classes" Attributes="@attributes"></GdsTabs>
        );

        // Assert
        component.MarkupMatches(
            @<div class="govuk-tabs @classes" attr1="value1" attr2="value2">
                <h2 class="govuk-tabs__title">@title</h2>
                <ul class="govuk-tabs__list" role="tablist">
                    @* tabs go here *@
                </ul>
                @* panels go here *@
            </div>
        );
    }
    
    [Fact]
    public void RendersPanels_WithCorrectDefaultActive()
    {
        // Arrange
        var tab1Title = "Tab title 1";
        var tab1Content = "Tab 1 content";
        var tab2Title = "Tab title 2";
        var tab2Content = "Tab 2 content";
        
        // Act
        var component = Render(@<GdsTabs>
                                   <GdsTabsPanel Title="@tab1Title">@tab1Content</GdsTabsPanel>
                                   <GdsTabsPanel Title="@tab2Title"></GdsTabsPanel>
                               </GdsTabs>);

        // Assert
        component.MarkupMatches(
            @<div class="govuk-tabs">
                <h2 class="govuk-tabs__title"></h2>
                <ul class="govuk-tabs__list" role="tablist">
                    <li class="govuk-tabs__list-item govuk-tabs__list-item--selected" role="presentation">
                        <a class="govuk-tabs__tab" role="tab">@tab1Title</a>
                    </li>
                    <li class="govuk-tabs__list-item" role="presentation">
                        <a class="govuk-tabs__tab" role="tab">@tab2Title</a>
                    </li>
                </ul>
                <div class="govuk-tabs__panel" role="tabpanel">@tab1Content</div>
                <div class="govuk-tabs__panel" role="tabpanel"></div>
            </div>);
    }
    
    [Fact]
    public void ClickingTab_SetsCorrectActivePanel()
    {
        // Arrange
        var tab1Title = "Tab title 1";
        var tab1Content = "Tab 1 content";
        var tab2Title = "Tab title 2";
        var tab2Content = "Tab 2 content";
        
        // Act
        var component = Render(@<GdsTabs>
                                   <GdsTabsPanel Title="@tab1Title">@tab1Content</GdsTabsPanel>
                                   <GdsTabsPanel Title="@tab2Title">@tab2Content</GdsTabsPanel>
                               </GdsTabs>);
        component.Find($"a:contains('{tab2Title}')").Click();

        // Assert - second tab should be active
        component.MarkupMatches(
            @<div class="govuk-tabs">
                <h2 class="govuk-tabs__title"></h2>
                <ul class="govuk-tabs__list" role="tablist">
                    <li class="govuk-tabs__list-item" role="presentation">
                        <a class="govuk-tabs__tab" role="tab">@tab1Title</a>
                    </li>
                    <li class="govuk-tabs__list-item govuk-tabs__list-item--selected" role="presentation">
                        <a class="govuk-tabs__tab" role="tab">@tab2Title</a>
                    </li>
                </ul>
                <div class="govuk-tabs__panel" role="tabpanel"></div>
                <div class="govuk-tabs__panel" role="tabpanel">@tab2Content</div>
            </div>);
    }
}