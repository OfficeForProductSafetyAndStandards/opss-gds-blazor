@inherits BunitContext

@code {

    [Fact]
    public void WhenIsPageHeadingIsSetToTrue_ThenOutputsHeading1InLegend()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="waste">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Which types of waste do you transport?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                Select all that apply
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="carcasses">Waste from animal carcasses</GdsCheckbox>
            <GdsCheckbox Value="mines">Waste from mines or quarries</GdsCheckbox>
            <GdsCheckbox Value="farm">Farm or agricultural waste</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Which types of waste do you transport?
                </h1>
            </legend>
            <div id="waste-hint" class="govuk-hint">
                Select all that apply
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste" name="waste" type="checkbox"
                           value="carcasses">
                    <label class="govuk-label govuk-checkboxes__label" for="waste">
                        Waste from animal carcasses
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-2" name="waste" type="checkbox"
                           value="mines">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-2">
                        Waste from mines or quarries
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-3" name="waste" type="checkbox"
                           value="farm">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-3">
                        Farm or agricultural waste
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void ThenOutputsCheckboxesWithLabel()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="waste">
        <LegendTemplate>
            <GdsLegend>
                Which types of waste do you transport?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                Select all that apply
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="carcasses">Waste from animal carcasses</GdsCheckbox>
            <GdsCheckbox Value="mines">Waste from mines or quarries</GdsCheckbox>
            <GdsCheckbox Value="farm">Farm or agricultural waste</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
            <legend class="govuk-fieldset__legend">
                Which types of waste do you transport?
            </legend>
            <div id="waste-hint" class="govuk-hint">
                Select all that apply
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste" name="waste" type="checkbox"
                           value="carcasses">
                    <label class="govuk-label govuk-checkboxes__label" for="waste">
                        Waste from animal carcasses
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-2" name="waste" type="checkbox"
                           value="mines">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-2">
                        Waste from mines or quarries
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-3" name="waste" type="checkbox"
                           value="farm">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-3">
                        Farm or agricultural waste
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenHintTemplateIsSetForAGdsCheckbox_ThenOutputsHintForCheckbox()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="nationality">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                What is your nationality?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                If you have dual nationality, select all options that are relevant to you.
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="british">
                <HintTemplate>
                    <GdsHint Classes="govuk-checkboxes__hint">
                        including English, Scottish, Welsh and Northern
                        Irish
                    </GdsHint>
                </HintTemplate>
                <ChildContent>British</ChildContent>
            </GdsCheckbox>
            <GdsCheckbox Value="irish">Irish</GdsCheckbox>
            <GdsCheckbox Value="other">Citizen of another country</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="nationality-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    What is your nationality?
                </h1>
            </legend>
            <div id="nationality-hint" class="govuk-hint">
                If you have dual nationality, select all options that are relevant to you.
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality" name="nationality" type="checkbox"
                           value="british" aria-describedby="nationality-item-hint">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality">
                        British
                    </label>
                    <div id="nationality-item-hint" class="govuk-hint govuk-checkboxes__hint">
                        including English, Scottish, Welsh and Northern Irish
                    </div>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-2" name="nationality" type="checkbox"
                           value="irish">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-2">
                        Irish
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-3" name="nationality" type="checkbox"
                           value="other">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-3">
                        Citizen of another country
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenChildContentContainsGdsCheckboxWithIsExclusiveSet_ThenOutputsCheckboxMarkedWithExclusiveDataBehaviourAttribute()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="countries">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Will you be travelling to any of these countries?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                Select all countries that apply
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="france">France</GdsCheckbox>
            <GdsCheckbox Value="portugal">Portugal</GdsCheckbox>
            <GdsCheckbox Value="spain">Spain</GdsCheckbox>
            <GdsCheckboxDivider>or</GdsCheckboxDivider>
            <GdsCheckbox Value="none" IsExclusive=@true>
                No, I will not be travelling to any of these countries
            </GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="countries-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Will you be travelling to any of these countries?
                </h1>
            </legend>
            <div id="countries-hint" class="govuk-hint">
                Select all countries that apply
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries" name="countries" type="checkbox"
                           value="france">
                    <label class="govuk-label govuk-checkboxes__label" for="countries">
                        France
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-2" name="countries" type="checkbox"
                           value="portugal">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-2">
                        Portugal
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-3" name="countries" type="checkbox"
                           value="spain">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-3">
                        Spain
                    </label>
                </div>
                <div class="govuk-checkboxes__divider">or</div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-5" name="countries" type="checkbox"
                           value="none" data-behaviour="exclusive">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-5">
                        No, I will not be travelling to any of these countries
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenMultipleValuesAreSet_ThenOutputsCheckboxesWithCheckboxesChecked()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="countries" Values=@(new List<string> { "france", "none" })>
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Will you be travelling to any of these countries?
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsCheckbox Value="france">France</GdsCheckbox>
            <GdsCheckbox Value="portugal">Portugal</GdsCheckbox>
            <GdsCheckbox Value="spain">Spain</GdsCheckbox>
            <GdsCheckboxDivider>or</GdsCheckboxDivider>
            <GdsCheckbox Value="none" IsExclusive=@true>
                No, I will not be travelling to any of these countries
            </GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Will you be travelling to any of these countries?
                </h1>
            </legend>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries" name="countries" type="checkbox"
                           value="france" checked>
                    <label class="govuk-label govuk-checkboxes__label" for="countries">
                        France
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-2" name="countries" type="checkbox"
                           value="portugal">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-2">
                        Portugal
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-3" name="countries" type="checkbox"
                           value="spain">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-3">
                        Spain
                    </label>
                </div>
                <div class="govuk-checkboxes__divider">or</div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="countries-5" name="countries" type="checkbox"
                           value="none" checked data-behaviour="exclusive">
                    <label class="govuk-label govuk-checkboxes__label" for="countries-5">
                        No, I will not be travelling to any of these countries
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenConditionalTemplateIsSetForEachGdsCheckbox_ThenOutputsConditionalContentForEachCheckbox()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="contact">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                How would you like to be contacted?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                Select all options that are relevant to you
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="email" Text="Email">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-email" Name="contactByEmail" Type="email" Autocomplete="email"
                                  Spellcheck="false" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Email address</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsCheckbox>
            <GdsCheckbox Value="phone" Text="Phone">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-phone" Name="contactByPhone" Type="tel" Autocomplete="tel"
                                  Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsCheckbox>
            <GdsCheckbox Value="text message" Text="Text message">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-text" Name="contactByText" Type="tel" Autocomplete="tel"
                                  Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Mobile phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="contact-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    How would you like to be contacted?
                </h1>
            </legend>
            <div id="contact-hint" class="govuk-hint">
                Select all options that are relevant to you
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="contact" name="contact" type="checkbox"
                           value="email" data-aria-controls="conditional-contact">
                    <label class="govuk-label govuk-checkboxes__label" for="contact">
                        Email
                    </label>
                </div>
                <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden"
                     id="conditional-contact">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-email">
                            Email address
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-email"
                               name="contactByEmail" type="email" spellcheck="false" autocomplete="email">
                    </div>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="contact-2" name="contact" type="checkbox"
                           value="phone" data-aria-controls="conditional-contact-2">
                    <label class="govuk-label govuk-checkboxes__label" for="contact-2">
                        Phone
                    </label>
                </div>
                <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden"
                     id="conditional-contact-2">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-phone">
                            Phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-phone"
                               name="contactByPhone" type="tel" autocomplete="tel">
                    </div>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="contact-3" name="contact" type="checkbox"
                           value="text message" data-aria-controls="conditional-contact-3">
                    <label class="govuk-label govuk-checkboxes__label" for="contact-3">
                        Text message
                    </label>
                </div>
                <div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden"
                     id="conditional-contact-3">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-text">
                            Mobile phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-text"
                               name="contactByText" type="tel" autocomplete="tel">
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }


    [Fact]
    public void WhenGdsCheckboxSizeSmallClassAddedToClasses_ThenOutputsCheckboxesWithSmallCheckboxesClass()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="organisation" Classes=@CheckboxSize.Small>
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Medium>
                Organisation
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsCheckbox Value="hmrc">
                HM Revenue and Customs (HMRC)
            </GdsCheckbox>
            <GdsCheckbox Value="employment-tribunal">Employment Tribunal</GdsCheckbox>
            <GdsCheckbox Value="MOD">Ministry of Defence</GdsCheckbox>
            <GdsCheckbox Value="DfT">Department for Transport</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                <h1 class="govuk-fieldset__heading">
                    Organisation
                </h1>
            </legend>
            <div class="govuk-checkboxes govuk-checkboxes--small" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="organisation" name="organisation" type="checkbox"
                           value="hmrc">
                    <label class="govuk-label govuk-checkboxes__label" for="organisation">
                        HM Revenue and Customs (HMRC)
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="organisation-2" name="organisation"
                           type="checkbox" value="employment-tribunal">
                    <label class="govuk-label govuk-checkboxes__label" for="organisation-2">
                        Employment Tribunal
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="organisation-3" name="organisation"
                           type="checkbox" value="MOD">
                    <label class="govuk-label govuk-checkboxes__label" for="organisation-3">
                        Ministry of Defence
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="organisation-4" name="organisation"
                           type="checkbox" value="DfT">
                    <label class="govuk-label govuk-checkboxes__label" for="organisation-4">
                        Department for Transport
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenErrorMessageTemplateIsSet_ThenOutputsErrorMessage()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="nationality">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                What is your nationality?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                If you have dual nationality, select all options that are relevant to you
            </GdsHint>
        </HintTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                Select if you are British, Irish or a citizen of a different country
            </GdsErrorMessage>
        </ErrorMessageTemplate>
        <ChildContent>
            <GdsCheckbox Value="british" Text="British">
                <HintTemplate>
                    <GdsHint Classes="govuk-checkboxes__hint">
                        including English, Scottish, Welsh and Northern
                        Irish
                    </GdsHint>
                </HintTemplate>
            </GdsCheckbox>
            <GdsCheckbox Value="irish">Irish</GdsCheckbox>
            <GdsCheckbox Value="other">Citizen of another country</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <fieldset class="govuk-fieldset" aria-describedby="nationality-hint nationality-error">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    What is your nationality?
                </h1>
            </legend>
            <div id="nationality-hint" class="govuk-hint">
                If you have dual nationality, select all options that are relevant to you
            </div>
            <p id="nationality-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> Select if you are British, Irish or a citizen
                of a different country
            </p>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality" name="nationality" type="checkbox"
                           value="british" aria-describedby="nationality-item-hint">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality">
                        British
                    </label>
                    <div id="nationality-item-hint" class="govuk-hint govuk-checkboxes__hint">
                        including English, Scottish, Welsh and Northern Irish
                    </div>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-2" name="nationality" type="checkbox"
                           value="irish">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-2">
                        Irish
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-3" name="nationality" type="checkbox"
                           value="other">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-3">
                        Citizen of another country
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenLegendTemplateIsNotSet_ThenOutputsCheckboxesWithNoLegend()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="empty-legend">
        <ChildContent>
            <GdsCheckbox Value="option1">Option 1</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        // Assert
        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="empty-legend" name="empty-legend" type="checkbox"
                           value="option1">
                    <label class="govuk-label govuk-checkboxes__label" for="empty-legend">Option 1</label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenDescribedByIsSet_ThenOutputsCheckboxesWithDescribedBy()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="waste" DescribedBy="waste-hint">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes="govuk-fieldset__legend--l">
                Which types of waste do you transport?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                Select all that apply
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsCheckbox Value="carcasses">Waste from animal carcasses</GdsCheckbox>
            <GdsCheckbox Value="mines">Waste from mines or quarries</GdsCheckbox>
            <GdsCheckbox Value="farm">Farm or agricultural waste</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        // Assert
        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Which types of waste do you transport?
                </h1>
            </legend>
            <div id="waste-hint" class="govuk-hint">
                Select all that apply
            </div>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste" name="waste" type="checkbox"
                           value="carcasses" aria-describedby="waste-hint">
                    <label class="govuk-label govuk-checkboxes__label" for="waste">
                        Waste from animal carcasses
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-2" name="waste" type="checkbox"
                           value="mines" aria-describedby="waste-hint">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-2">
                        Waste from mines or quarries
                    </label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="waste-3" name="waste" type="checkbox"
                           value="farm" aria-describedby="waste-hint">
                    <label class="govuk-label govuk-checkboxes__label" for="waste-3">
                        Farm or agricultural waste
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WithInvalidInitialValue_WhenACheckboxHasEmptyValue_ThenThrowsException()
    {
        // Act & Assert
        var exception = Assert.Throws<ArgumentNullException>(() =>
        {
            Render(
                @<GdsCheckboxes Name="missing-value">
                    <ChildContent>
                        <GdsCheckbox Value="">Missing Value</GdsCheckbox>
                    </ChildContent>
                </GdsCheckboxes>
            );
        });

        // Assert
        Assert.Equal("The Value parameter is required for each GdsCheckbox (Parameter 'Value')", exception.Message);
    }

    [Fact]
    public void WithInvalidInitialValue_WhenACheckboxHasNoValue_ThenThrowsException()
    {
        // Act & Assert
        var exception = Assert.Throws<ArgumentNullException>(() =>
        {
            Render(
                @<GdsCheckboxes Name="missing-value">
                    <ChildContent>
                        <GdsCheckbox>Missing Value</GdsCheckbox>
                    </ChildContent>
                </GdsCheckboxes>
            );
        });

        // Assert
        Assert.Equal("The Value parameter is required for each GdsCheckbox (Parameter 'Value')", exception.Message);
    }

    [Fact]
    public void WhenErrorMessageTemplateContainsMultipleErrorContent_ThenOutputsMultipleErrorMessages()
    {
        // Arrange
        var component = Render(
    @<GdsCheckboxes Name="nationality">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes="govuk-fieldset__legend--l">
                What is your nationality?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                If you have dual nationality, select all options that are relevant to you
            </GdsHint>
        </HintTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                Error 1: Select a nationality<br />
                Error 2: This field is mandatory
            </GdsErrorMessage>
        </ErrorMessageTemplate>
        <ChildContent>
            <GdsCheckbox Value="british">British</GdsCheckbox>
            <GdsCheckbox Value="irish">Irish</GdsCheckbox>
            <GdsCheckbox Value="other">Citizen of another country</GdsCheckbox>
        </ChildContent>
    </GdsCheckboxes>
    );

        // Assert
        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <fieldset class="govuk-fieldset" aria-describedby="nationality-hint nationality-error">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    What is your nationality?
                </h1>
            </legend>
            <div id="nationality-hint" class="govuk-hint">
                If you have dual nationality, select all options that are relevant to you
            </div>
            <p id="nationality-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span>
                Error 1: Select a nationality<br />
                Error 2: This field is mandatory
            </p>
            <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality" name="nationality" type="checkbox"
                           value="british">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality">British</label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-2" name="nationality" type="checkbox"
                           value="irish">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-2">Irish</label>
                </div>
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="nationality-3" name="nationality" type="checkbox"
                           value="other">
                    <label class="govuk-label govuk-checkboxes__label" for="nationality-3">
                        Citizen of another
                        country
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenValuesChangedIsSet_ThenSpecifiedEventIsTriggeredOnCheckboxInput()
    {
        // Arrange
        var currentValues = new List<string>();

        var component = Render(
            @<GdsCheckboxes Name="triggerValuesChanged" 
                            Values=@(new()) 
                            ValuesChanged=@((values) => currentValues = values)
             >
                <ChildContent>
                    <GdsCheckbox Value="france">France</GdsCheckbox>
                    <GdsCheckbox Value="portugal">Portugal</GdsCheckbox>
                    <GdsCheckbox Value="spain">Spain</GdsCheckbox>
                    <GdsCheckboxDivider>or</GdsCheckboxDivider>
                    <GdsCheckbox Value="none" IsExclusive=@true>
                        No, I will not be travelling to any of these countries
                    </GdsCheckbox>
                </ChildContent>
            </GdsCheckboxes>
        );

        // Act
        component
            .Find("[id=triggerValuesChanged]")
            .Input(new() { Value = true });

        component
            .Find("[id=triggerValuesChanged-2]")
            .Input(new() { Value = false });

        component
            .Find("[id=triggerValuesChanged-3]")
            .Input(new() { Value = true });

        // Assert
        Assert.NotNull(currentValues);
        Assert.NotEmpty(currentValues);
        Assert.Equal(2, currentValues.Count);
        Assert.Contains("france", currentValues);
        Assert.DoesNotContain("portugal", currentValues);
        Assert.Contains("spain", currentValues);

        // Act
        component
            .Find("[id=triggerValuesChanged]")
            .Input(new() { Value = false });

        component
            .Find("[id=triggerValuesChanged-2]")
            .Input(new() { Value = false });

        component
            .Find("[id=triggerValuesChanged-3]")
            .Input(new() { Value = false });

        component
            .Find("[id=triggerValuesChanged-5]")
            .Input(new() { Value = true });

        // Assert
        Assert.NotNull(currentValues);
        Assert.NotEmpty(currentValues);
        Assert.Single(currentValues);
        Assert.DoesNotContain("france", currentValues);
        Assert.DoesNotContain("portugal", currentValues);
        Assert.DoesNotContain("spain", currentValues);
        Assert.Contains("none", currentValues);
    }

}