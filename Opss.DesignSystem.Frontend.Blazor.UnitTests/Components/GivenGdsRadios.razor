@inherits BunitContext

@code {
    [Fact]
    public void WhenIsPageHeadingIsSetToTrue_ThenOutputsHeading1InLegend()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="outputPageHeading" DataTestId="GdsRadios">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Where do you live?
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="england" DataTestId="GdsRadio" InputDataTestId="RadioTestId">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group" data-testid="GdsRadios">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Where do you live?
                </h1>
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item" data-testid="GdsRadio">
                    <input class="govuk-radios__input" id="outputPageHeading" name="outputPageHeading" type="radio" value="england"
                           data-testid="RadioTestId">
                    <label class="govuk-label govuk-radios__label" for="outputPageHeading">
                        England
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="outputPageHeading-2" name="outputPageHeading" type="radio" value="scotland">
                    <label class="govuk-label govuk-radios__label" for="outputPageHeading-2">
                        Scotland
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="outputPageHeading-3" name="outputPageHeading" type="radio" value="wales">
                    <label class="govuk-label govuk-radios__label" for="outputPageHeading-3">
                        Wales
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="outputPageHeading-4" name="outputPageHeading" type="radio" value="northern-ireland">
                    <label class="govuk-label govuk-radios__label" for="outputPageHeading-4">
                        Northern Ireland
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void ThenOutputsRadioButtons()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="whereDoYouLive">
        <LegendTemplate>
            <GdsLegend>
                Where do you live?
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend">
                Where do you live?
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive" name="whereDoYouLive" type="radio" value="england">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive">
                        England
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-2" name="whereDoYouLive" type="radio" value="scotland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-2">
                        Scotland
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-3" name="whereDoYouLive" type="radio" value="wales">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-3">
                        Wales
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-4" name="whereDoYouLive" type="radio" value="northern-ireland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-4">
                        Northern Ireland
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenGdsInlineClassAddedToClasses_ThenOutputsRadioButtonsWithInlineFormatting()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="inlineClass" Classes=@RadioClasses.Inline>
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Have you changed your name?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                This includes changing your last name or spelling your name differently
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsRadio Value="yes">Yes</GdsRadio>
            <GdsRadio Value="no">No</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="inlineClass-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Have you changed your name?
                </h1>
            </legend>
            <div id="inlineClass-hint" class="govuk-hint">
                This includes changing your last name or spelling your name differently
            </div>
            <div class="govuk-radios govuk-radios--inline" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="inlineClass" name="inlineClass" type="radio" value="yes">
                    <label class="govuk-label govuk-radios__label" for="inlineClass">
                        Yes
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="inlineClass-2" name="inlineClass" type="radio" value="no">
                    <label class="govuk-label govuk-radios__label" for="inlineClass-2">
                        No
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenHintTemplateIsSetForEachGdsRadio_ThenOutputsHintForEachRadioButton()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="hintOnEachRadio">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                How do you want to sign in?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>
                You’ll need an account to prove your identity and complete your Self Assessment
            </GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsRadio Value="government-gateway">
                <HintTemplate>
                    @* TODO: Can this be improved? *@
                    <GdsHint Classes="govuk-radios__hint">
                        You’ll have a user ID if you’ve registered for Self Assessment or filed a tax return online before
                    </GdsHint>
                </HintTemplate>
                <ChildContent>
                    Sign in with Government Gateway
                </ChildContent>
            </GdsRadio>
            <GdsRadio Value="govuk-one-login">
                <HintTemplate>
                    <GdsHint Classes="govuk-radios__hint">
                        If you don’t have a GOV.UK One Login, you can create one
                    </GdsHint>
                </HintTemplate>
                <ChildContent>
                    Sign in with GOV.UK One Login
                </ChildContent>
            </GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="hintOnEachRadio-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    How do you want to sign in?
                </h1>
            </legend>
            <div id="hintOnEachRadio-hint" class="govuk-hint">
                You’ll need an account to prove your identity and complete your Self Assessment
            </div>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="hintOnEachRadio" name="hintOnEachRadio" type="radio" value="government-gateway" aria-describedby="hintOnEachRadio-item-hint">
                    <label class="govuk-label govuk-radios__label" for="hintOnEachRadio">
                        Sign in with Government Gateway
                    </label>
                    <div id="hintOnEachRadio-item-hint" class="govuk-hint govuk-radios__hint">
                        You’ll have a user ID if you’ve registered for Self Assessment or filed a tax return online before
                    </div>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="hintOnEachRadio-2" name="hintOnEachRadio" type="radio" value="govuk-one-login" aria-describedby="hintOnEachRadio-2-item-hint">
                    <label class="govuk-label govuk-radios__label" for="hintOnEachRadio-2">
                        Sign in with GOV.UK One Login
                    </label>
                    <div id="hintOnEachRadio-2-item-hint" class="govuk-hint govuk-radios__hint">
                        If you don’t have a GOV.UK One Login, you can create one
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenGdsRadioDividerAddedToChildContent_ThenOutputsRadioButtonsWithDivider()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="aDivider">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Where do you live?
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
            <GdsRadioDivider>or</GdsRadioDivider>
            <GdsRadio Value="abroad">I am a British citizen living abroad</GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Where do you live?
                </h1>
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="aDivider" name="aDivider" type="radio" value="england">
                    <label class="govuk-label govuk-radios__label" for="aDivider">
                        England
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="aDivider-2" name="aDivider" type="radio" value="scotland">
                    <label class="govuk-label govuk-radios__label" for="aDivider-2">
                        Scotland
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="aDivider-3" name="aDivider" type="radio" value="wales">
                    <label class="govuk-label govuk-radios__label" for="aDivider-3">
                        Wales
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="aDivider-4" name="aDivider" type="radio" value="northern-ireland">
                    <label class="govuk-label govuk-radios__label" for="aDivider-4">
                        Northern Ireland
                    </label>
                </div>
                <div class="govuk-radios__divider">or</div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="aDivider-6" name="aDivider" type="radio" value="abroad">
                    <label class="govuk-label govuk-radios__label" for="aDivider-6">
                        I am a British citizen living abroad
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenConditionalTemplateIsSetForEachGdsRadio_ThenOutputsConditionalContentForEachRadioButton()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="contact">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                How would you prefer to be contacted?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>Select one option</GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsRadio Value="email" Text="Email">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-email" Name="contactByEmail" Type="email" Autocomplete="email" Spellcheck="false" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Email address</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
            <GdsRadio Value="phone" Text="Phone">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-phone" Name="contactByPhone" Type="tel" Autocomplete="tel" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
            <GdsRadio Value="text" Text="Text message">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-text" Name="contactByText" Type="tel" Autocomplete="tel" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Mobile phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="contact-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    How would you prefer to be contacted?
                </h1>
            </legend>
            <div id="contact-hint" class="govuk-hint">
                Select one option
            </div>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact" name="contact" type="radio" value="email" data-aria-controls="conditional-contact">
                    <label class="govuk-label govuk-radios__label" for="contact">
                        Email
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-contact">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-email">
                            Email address
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-email" name="contactByEmail" type="email" spellcheck="false" autocomplete="email">
                    </div>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact-2" name="contact" type="radio" value="phone" data-aria-controls="conditional-contact-2">
                    <label class="govuk-label govuk-radios__label" for="contact-2">
                        Phone
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-contact-2">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-phone">
                            Phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-phone" name="contactByPhone" type="tel" autocomplete="tel">
                    </div>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact-3" name="contact" type="radio" value="text" data-aria-controls="conditional-contact-3">
                    <label class="govuk-label govuk-radios__label" for="contact-3">
                        Text message
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-contact-3">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-text">
                            Mobile phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-text" name="contactByText" type="tel" autocomplete="tel">
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenGdsSmallClassAddedToClasses_ThenOutputsRadioButtonsFormattedAsSmallRadioButtons()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="smallInput" Classes=@RadioClasses.Small>
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Medium>
                Filter
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year">Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                <h1 class="govuk-fieldset__heading">
                    Filter
                </h1>
            </legend>
            <div class="govuk-radios govuk-radios--small" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="smallInput" name="smallInput" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="smallInput">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="smallInput-2" name="smallInput" type="radio" value="year">
                    <label class="govuk-label govuk-radios__label" for="smallInput-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenErrorTemplateIsSet_ThenOutputsRadiosWithErrorMessage()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="whereDoYouLive">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Where do you live?
            </GdsLegend>
        </LegendTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                Select the country where you live
            </GdsErrorMessage>
        </ErrorMessageTemplate>
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
        <fieldset class="govuk-fieldset" aria-describedby="whereDoYouLive-error">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Where do you live?
                </h1>
            </legend>
            <p id="whereDoYouLive-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> Select the country where you live
            </p>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive" name="whereDoYouLive" type="radio" value="england">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive">
                        England
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-2" name="whereDoYouLive" type="radio" value="scotland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-2">
                        Scotland
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-3" name="whereDoYouLive" type="radio" value="wales">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-3">
                        Wales
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-4" name="whereDoYouLive" type="radio" value="northern-ireland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-4">
                        Northern Ireland
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenLegendTemplateIsNotSet_ThenOutputsRadiosWithNoLegendOrFieldset()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="radiosValue">
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year">Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <div class="govuk-radios" data-module="govuk-radios">
            <div class="govuk-radios__item">
                <input class="govuk-radios__input" id="radiosValue" name="radiosValue" type="radio" value="month">
                <label class="govuk-label govuk-radios__label" for="radiosValue">
                    Monthly
                </label>
            </div>
            <div class="govuk-radios__item">
                <input class="govuk-radios__input" id="radiosValue-2" name="radiosValue" type="radio" value="year">
                <label class="govuk-label govuk-radios__label" for="radiosValue-2">
                    Yearly
                </label>
            </div>
        </div>
    </div>
        );
    }

    [Fact]
    public void WhenFieldsetRoleIsSete_ThenOutputsRadiosWithFielset()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="radiosValue" FieldsetRole="form">
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year">Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" role="form">
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue" name="radiosValue" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="radiosValue">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue-2" name="radiosValue" type="radio" value="year">
                    <label class="govuk-label govuk-radios__label" for="radiosValue-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenFieldsetClassesIsSete_ThenOutputsRadiosFieldsetWithClasses()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="radiosValue" FieldsetClasses="class1 class2">
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year">Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset class1 class2">
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue" name="radiosValue" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="radiosValue">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue-2" name="radiosValue" type="radio" value="year">
                    <label class="govuk-label govuk-radios__label" for="radiosValue-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenFieldsetDescribedByIsSet_ThenOutputsRadioFieldsetWithDescribedByOverridingCalculatedValues()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="whereDoYouLive" FieldsetDescribedBy="default-location-overriding">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                Where do you live?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>This can be different to where you went before</GdsHint>
        </HintTemplate>        
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                Select the country where you live
            </GdsErrorMessage>
        </ErrorMessageTemplate>
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group govuk-form-group--error">
		<fieldset class="govuk-fieldset" aria-describedby="default-location-overriding">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    Where do you live?
                </h1>
            </legend>
            <div id="whereDoYouLive-hint" class="govuk-hint">
                This can be different to where you went before
            </div>
            <p id="whereDoYouLive-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> Select the country where you live
            </p>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive" name="whereDoYouLive" type="radio" value="england">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive">
                        England
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-2" name="whereDoYouLive" type="radio" value="scotland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-2">
                        Scotland
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-3" name="whereDoYouLive" type="radio" value="wales">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-3">
                        Wales
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="whereDoYouLive-4" name="whereDoYouLive" type="radio" value="northern-ireland">
                    <label class="govuk-label govuk-radios__label" for="whereDoYouLive-4">
                        Northern Ireland
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenConditionalErrorMessageTemplateIsSetForEachGdsRadio_ThenOutputsConditionalErrorMessageContentForEachRadioButton()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="contact">
        <LegendTemplate>
            <GdsLegend IsPageHeading=@true Classes=@FieldsetLegendSize.Large>
                How would you prefer to be contacted?
            </GdsLegend>
        </LegendTemplate>
        <HintTemplate>
            <GdsHint>Select one option</GdsHint>
        </HintTemplate>
        <ChildContent>
            <GdsRadio Value="email" Text="Email" Checked=@true>
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-email" Name="contactByEmail" Type="email" Autocomplete="email" Spellcheck="false" Classes=@LayoutWidth.OneHalf>
                        <LabelTemplate>
                            <GdsLabel>Email address</GdsLabel>
                        </LabelTemplate>
                        <ErrorMessageTemplate>
                            <GdsErrorMessage>Email address cannot be blank</GdsErrorMessage>
                        </ErrorMessageTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
            <GdsRadio Value="phone" Text="Phone">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-phone" Name="contactByPhone" Type="tel" Autocomplete="tel" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
            <GdsRadio Value="text" Text="Text message">
                <ConditionalTemplate>
                    <GdsTextInput Id="contact-by-text" Name="contactByText" Type="tel" Autocomplete="tel" Classes=@LayoutWidth.OneThird>
                        <LabelTemplate>
                            <GdsLabel>Mobile phone number</GdsLabel>
                        </LabelTemplate>
                    </GdsTextInput>
                </ConditionalTemplate>
            </GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset" aria-describedby="contact-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-fieldset__heading">
                    How would you prefer to be contacted?
                </h1>
            </legend>
            <div id="contact-hint" class="govuk-hint">
                Select one option
            </div>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact" name="contact" type="radio" value="email" checked data-aria-controls="conditional-contact">
                    <label class="govuk-label govuk-radios__label" for="contact">
                        Email
                    </label>
                </div>
                <div class="govuk-radios__conditional" id="conditional-contact">
                    <div class="govuk-form-group govuk-form-group--error">
                        <label class="govuk-label" for="contact-by-email">
                            Email address
                        </label>
                        <p id="contact-by-email-error" class="govuk-error-message">
                            <span class="govuk-visually-hidden">Error:</span> Email address cannot be blank
                        </p>
                        <input class="govuk-input govuk-!-width-one-half govuk-input--error" id="contact-by-email" name="contactByEmail" type="email" spellcheck="false" aria-describedby="contact-by-email-error" autocomplete="email">
                    </div>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact-2" name="contact" type="radio" value="phone" data-aria-controls="conditional-contact-2">
                    <label class="govuk-label govuk-radios__label" for="contact-2">
                        Phone
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-contact-2">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-phone">
                            Phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-phone" name="contactByPhone" type="tel" autocomplete="tel">
                    </div>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="contact-3" name="contact" type="radio" value="text" data-aria-controls="conditional-contact-3">
                    <label class="govuk-label govuk-radios__label" for="contact-3">
                        Text message
                    </label>
                </div>
                <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-contact-3">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="contact-by-text">
                            Mobile phone number
                        </label>
                        <input class="govuk-input govuk-!-width-one-third" id="contact-by-text" name="contactByText" type="tel" autocomplete="tel">
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
    );
    }

    [Fact]
    public void WhenValueIsSet_ThenOutputsCheckedOnMatchingRadioButton()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="radiosValue" Value="year">
        <LegendTemplate>
            <GdsLegend>
                Filter
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year">Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend">
                Filter
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue" name="radiosValue" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="radiosValue">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radiosValue-2" name="radiosValue" type="radio" value="year" checked>
                    <label class="govuk-label govuk-radios__label" for="radiosValue-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenValueChangedIsSet_ThenSpecifiedEventIsTriggeredOnRadioInput()
    {
        // Arrange
        var newValue = string.Empty;

        var component = Render(
        @<GdsRadios Name="triggerValueChange" ValueChanged=@((value) => newValue = value)>
            <LegendTemplate>
                <GdsLegend>
                    Filter
                </GdsLegend>
            </LegendTemplate>
            <ChildContent>
                <GdsRadio Value="month">Monthly</GdsRadio>
                <GdsRadio Value="year">Yearly</GdsRadio>
            </ChildContent>
        </GdsRadios>
        );

        // Act
        component
            .Find("[id=triggerValueChange-2]")
            .Input(new ChangeEventArgs {});

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("year", newValue);

        // Act
        component
            .Find("[id=triggerValueChange]")
            .Input(new ChangeEventArgs { });

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("month", newValue);
    }

    [Fact]
    public void WhenRadioIsChecked_ThenOutputsCheckedOnMatchingRadioButton()
    {
        // Arrange
        var component = Render(
    @<GdsRadios Name="radioChecked">
        <LegendTemplate>
            <GdsLegend>
                Filter
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
			<GdsRadio Value="year" Checked=@true>Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend">
                Filter
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radioChecked" name="radioChecked" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="radioChecked">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radioChecked-2" name="radioChecked" type="radio" value="year" checked>
                    <label class="govuk-label govuk-radios__label" for="radioChecked-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );
    }

    [Fact]
    public void WhenRadioIsCheckedAndValueIsSet_ThenOutputsCheckedOnMatchingRadioButtonAndDoesNotTriggerValueChanged()
    {
        // Arrange
        var currentValue = string.Empty;

        // Act
        var component = Render(
    @<GdsRadios Name="radioChecked" Value="month" ValueChanged=@((value) => currentValue = value)>
        <LegendTemplate>
            <GdsLegend>
                Filter
            </GdsLegend>
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="month">Monthly</GdsRadio>
            <GdsRadio Value="year" Checked=@true>Yearly</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        component.MarkupMatches(
    @<div class="govuk-form-group">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend">
                Filter
            </legend>
            <div class="govuk-radios" data-module="govuk-radios">
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radioChecked" name="radioChecked" type="radio" value="month">
                    <label class="govuk-label govuk-radios__label" for="radioChecked">
                        Monthly
                    </label>
                </div>
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="radioChecked-2" name="radioChecked" type="radio" value="year" checked>
                    <label class="govuk-label govuk-radios__label" for="radioChecked-2">
                        Yearly
                    </label>
                </div>
            </div>
        </fieldset>
    </div>
        );

        Assert.Equal(string.Empty, currentValue);
    }

    [Fact]
    public void WhenRadioIsChecked_ThenSpecifiedValueChangedEventIsTriggered()
    {
        // Arrange
        var newValue = string.Empty;

        var component = Render(
    @<GdsRadios Name="whereDoYouLive" ValueChanged=@((value) => newValue = value)>
        <LegendTemplate>
            Where do you live?
        </LegendTemplate>        
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
    );

        // Act
        component
            .Find("[id=whereDoYouLive-2]")
            .Input(new ChangeEventArgs { });

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("scotland", newValue);

        // Act
        component
            .Find("[id=whereDoYouLive-4]")
            .Input(new ChangeEventArgs { });

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("northern-ireland", newValue);
    }

    [Fact]
    public void WhenBindValueIsSet_ThenSpecifiedRadioIsSelected()
    {
        // Arrange
        var newValue = string.Empty;

        var component = Render(
    @<GdsRadios Name="whereDoYouLive" @bind-Value=@newValue>
        <LegendTemplate>
            Where do you live?
        </LegendTemplate>
        <ChildContent>
            <GdsRadio Value="england">England</GdsRadio>
            <GdsRadio Value="scotland">Scotland</GdsRadio>
            <GdsRadio Value="wales">Wales</GdsRadio>
            <GdsRadio Value="northern-ireland">Northern Ireland</GdsRadio>
        </ChildContent>
    </GdsRadios>
        );

        // Act
        component
            .Find("[id=whereDoYouLive-2]")
            .Input(new ChangeEventArgs { });

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("scotland", newValue);

        // Act
        component
            .Find("[id=whereDoYouLive-4]")
            .Input(new ChangeEventArgs { });

        // Assert
        Assert.NotEmpty(newValue);
        Assert.Equal("northern-ireland", newValue);
    }
}