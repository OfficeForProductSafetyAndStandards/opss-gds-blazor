@inherits BunitContext

@code {
    [Fact]
    public void OutputsTableWithHeaderAndRows()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 3</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>41</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>52</td>
        </tr>
    </tbody>
</table>
    );
    }

    [Fact]
    public void OutputsTableWithHeaderAndRowsAndRowHeaders()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable FirstCellIsHeader>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row Header</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row Header</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 3</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <th scope="row" class=@TableClasses.HeaderCell>Row Header</th>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>41</td>
        </tr>
        <tr class=@TableClasses.Row>
            <th scope="row" class=@TableClasses.HeaderCell>Row Header</th>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>52</td>
        </tr>
    </tbody>
</table>
    );
    }

    [Fact]
    public void OutputsTableWithHeaderAndRowsAndCaption()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable CaptionText="Test Caption Text">
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <caption class="govuk-table__caption">Test Caption Text</caption>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>41</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>52</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsTableWithHeaderAndRowsAndCaptionAndCaptionClass()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable CaptionText="Test Caption Text" CaptionTextClasses="captionclass1 captionclass2">
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>41</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>52</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <caption class="govuk-table__caption captionclass1 captionclass2">Test Caption Text</caption>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>41</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>52</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsTableWithNoHeaders()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Headless Row</GdsTableCell>
                <GdsTableCell>331</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Headless Row</GdsTableCell>
                <GdsTableCell>332</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Headless Row</td>
            <td class=@TableClasses.Cell>331</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Headless Row</td>
            <td class=@TableClasses.Cell>332</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsTableWithHeaderAndRowspan()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
            <GdsTableCell>Heading 4</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell RowSpan="3">Content spanning 3 rows</GdsTableCell>
                <GdsTableCell>Content 1</GdsTableCell>
                <GdsTableCell>£300</GdsTableCell>
                <GdsTableCell>41.1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Content 2</GdsTableCell>
                <GdsTableCell>£600</GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Content 3</GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
                <GdsTableCell>41.3</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 4</GdsTableCell>
                <GdsTableCell>Content 4</GdsTableCell>
                <GdsTableCell>£1,200</GdsTableCell>
                <GdsTableCell>41.4</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 3</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 4</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell rowspan="3">Content spanning 3 rows</td>
            <td class=@TableClasses.Cell>Content 1</td>
            <td class=@TableClasses.Cell>£300</td>
            <td class=@TableClasses.Cell>41.1</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Content 2</td>
            <td class=@TableClasses.Cell>£600</td>
            <td class=@TableClasses.Cell>41.2</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Content 3</td>
            <td class=@TableClasses.Cell>£900</td>
            <td class=@TableClasses.Cell>41.3</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 4</td>
            <td class=@TableClasses.Cell>Content 4</td>
            <td class=@TableClasses.Cell>£1,200</td>
            <td class=@TableClasses.Cell>41.4</td>
        </tr>
    </tbody>
</table>
        );
    }


    [Fact]
    public void OutputsTableWithHeaderAndColspan()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
            <GdsTableCell>Heading 2</GdsTableCell>
            <GdsTableCell>Heading 3</GdsTableCell>
            <GdsTableCell>Heading 4</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell>Row 1</GdsTableCell>
                <GdsTableCell ColSpan="3">Content spanning 3 columns</GdsTableCell>
                <GdsTableCell>£300</GdsTableCell>
                <GdsTableCell>41.1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 2</GdsTableCell>
                <GdsTableCell>£600</GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 3</GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
                <GdsTableCell>41.3</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 4</GdsTableCell>
                <GdsTableCell>Content 4</GdsTableCell>
                <GdsTableCell>£1,200</GdsTableCell>
                <GdsTableCell>41.4</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 2</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 3</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 4</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 1</td>
            <td colspan="3" class=@TableClasses.Cell>Content spanning 3 columns</td>
            <td class=@TableClasses.Cell>£300</td>
            <td class=@TableClasses.Cell>41.1</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 2</td>
            <td class=@TableClasses.Cell>£600</td>
            <td class=@TableClasses.Cell>41.2</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 3</td>
            <td class=@TableClasses.Cell>£900</td>
            <td class=@TableClasses.Cell>41.3</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 4</td>
            <td class=@TableClasses.Cell>Content 4</td>
            <td class=@TableClasses.Cell>£1,200</td>
            <td class=@TableClasses.Cell>41.4</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsNoColspanIfSetTo1()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell ColSpan="1">Row 1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 2</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 1</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 2</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsNoRowspanIfSetTo1()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell>Heading 1</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell RowSpan="1">Row 1</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 2</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell>Heading 1</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 1</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 2</td>
        </tr>
    </tbody>
</table>
        );
    }


    [Fact]
    public void OutputsTableWithHtmlContent()
    {
        // Arrange, Act
        var component = Render(
    @<GdsTable>
        <HeadTemplate>
            <GdsTableCell><GdsHeading Classes=@HeadingSize.Small HeadingLevel="3">Heading 1 at 3</GdsHeading></GdsTableCell>
            <GdsTableCell><u>Heading 2</u></GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow>
                <GdsTableCell><GdsLink Href="#">Row 1 link</GdsLink></GdsTableCell>
                <GdsTableCell>41.2</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell><GdsTag Classes=@TagClasses.Blue>Row 2</GdsTag></GdsTableCell>
                <GdsTableCell>£900</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row 3 </GdsTableCell>
                <GdsTableCell><p>Content 4</p></GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class=@TableClasses.HeaderCell><h3 class=@HeadingSize.Small>Heading 1 at 3</h3></th>
            <th scope="col" class=@TableClasses.HeaderCell><u>Heading 2</u></th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell><a class="govuk-link" href="#">Row 1 link</a></td>
            <td class=@TableClasses.Cell>41.2</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell><strong class="govuk-tag @TagClasses.Blue">Row 2</strong></td>
            <td class=@TableClasses.Cell>£900</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row 3</td>
            <td class=@TableClasses.Cell><p>Content 4</p></td>
        </tr>
    </tbody>
</table>
    );
    }


    [Fact]
    public void OutputsTableWithClasses()
    {
        var tableClass = "tableClass";
        var headerClass = "headerClass";
        var rowClass = "rowClass";
        var cellClass = "cellClass";

        // Arrange, Act
        var component = Render(
    @<GdsTable Classes=@tableClass>
        <HeadTemplate>
            <GdsTableCell Classes=@headerClass>Heading</GdsTableCell>
            <GdsTableCell>Heading</GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            <GdsTableRow Classes=@rowClass>
                <GdsTableCell Classes=@cellClass>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
            </GdsTableRow>
            <GdsTableRow>
                <GdsTableCell>Row</GdsTableCell>
                <GdsTableCell>Row</GdsTableCell>
            </GdsTableRow>
        </RowsTemplate>
    </GdsTable>
        );

        // Assert
        component.MarkupMatches(
@<table class="@TableClasses.Table @tableClass">
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row>
            <th scope="col" class="@TableClasses.HeaderCell @headerClass">Heading</th>
            <th scope="col" class=@TableClasses.HeaderCell>Heading</th>
        </tr>
    </thead>
    <tbody class=@TableClasses.Body>
        <tr class="@TableClasses.Row @rowClass">
            <td class="@TableClasses.Cell @cellClass">Row</td>
            <td class=@TableClasses.Cell>Row</td>
        </tr>
        <tr class=@TableClasses.Row>
            <td class=@TableClasses.Cell>Row</td>
            <td class=@TableClasses.Cell>Row</td>
        </tr>
    </tbody>
</table>
        );
    }

    [Fact]
    public void OutputsEmptyTable()
    {
        // Arrange, Act
        var component = Render(@<GdsTable>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <tbody class=@TableClasses.Body></tbody>
</table>
        );
    }

    [Fact]
    public void OutputsEmptyTableWithEmptyHeader()
    {
        // Arrange, Act
        var component = Render(@<GdsTable>
            <HeadTemplate></HeadTemplate>
    </GdsTable>
    );

        // Assert
        component.MarkupMatches(
@<table class=@TableClasses.Table>
    <thead class=@TableClasses.Head>
        <tr class=@TableClasses.Row></tr>
    </thead>
    <tbody class=@TableClasses.Body></tbody>
</table>
        );
    }


}
