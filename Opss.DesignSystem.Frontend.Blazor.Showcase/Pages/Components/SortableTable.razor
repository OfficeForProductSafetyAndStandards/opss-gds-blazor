@page "/Components/Table/Sortable"
@layout _ComponentsLayout

<PageTitle>Table</PageTitle>

<span class="govuk-caption-xl">Components</span>
<h1 class="govuk-heading-xl">Sortable Table</h1>

<p class="govuk-body">
    A blazor implementation of the MOJ <a href="https://design-patterns.service.justice.gov.uk/components/sortable-table/" class="govuk-link">Sortable table</a> pattern.
</p>

<h2 class="govuk-heading-l" id="how-it-works">How it works</h2>
<Example BlazorExampleContent="@(@"<GdsTable 
    CaptionText=""A sortable table with data from a data source"" 
    IsSortable=@true 
    OnTableSort=@SortTableAsync
>
        <HeadTemplate>
            <GdsTableCell SortColumnName=""Task"">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DaysLeft"">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName=""Cost"">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DueDate"">
                Due date
            </GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in data!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString(""C"")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
")">
    <GdsTable CaptionText="A sortable table with data from a data source" IsSortable OnTableSort=@SortTableAsync>
        <HeadTemplate>
            <GdsTableCell SortColumnName="Task">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName="DaysLeft">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName="Cost">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName="DueDate">
                Due date
            </GdsTableCell>
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in data!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString("C")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
</Example>

<h3 class="govuk-heading-s" id="with-non-sorted-column">With a non-sorted column</h3>
<Example BlazorExampleContent="@(@"<GdsTable CaptionText=""With a non-sorted column""
    IsSortable 
    OnTableSort=@SortTableAsync
>
        <HeadTemplate>
            <GdsTableCell SortColumnName=""Task"">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DaysLeft"">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName=""Cost"">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DueDate"">
                Due date
            </GdsTableCell>
            <GdsTableCell />
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in data!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString(""C"")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                    <GdsTableCell>
                        <GdsButton Type=""button"" Value=@rowData.id.ToString()>Edit</GdsButton>
                    </GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
")" 
CodeExampleContent="@(@"@code{
    private YourDataDomainClass[]? data;

    protected override Task OnInitializedAsync()
    {
        //retrieve data from your data source using initial default sort options
        data = await YourDataSource.GetDataAsync();
        base.OnInitializedAsync();
    }

    private async Task SortTableAsync(TableSortArgs args)
    {
        //retrieve data from your data source using the sort column name and order
        data = await YourDataSource.GetDataAsync(args.Name, args.Order);
    }

    //Note: synchronous functions and overloads can be used as well
}")">
    <GdsTable CaptionText="With a non-sorted column" IsSortable OnTableSort=@SortTableAsync>
        <HeadTemplate>
            <GdsTableCell SortColumnName="Task">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName="DaysLeft">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName="Cost">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName="DueDate">
                Due date
            </GdsTableCell>
            <GdsTableCell />
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in data!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString("C")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                    <GdsTableCell>
                        <GdsButton Type="button" Value=@rowData.id.ToString()>Edit</GdsButton>
                    </GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
</Example>

<h3 class="govuk-heading-s" id="initial-sort-order">With a default or initial sort column and order</h3>
<Example BlazorExampleContent="@(@"<GdsTable CaptionText=""Set initial sort column and order""
    IsSortable
    OnTableSort=@SortTableAsync
    InitialSortOrder=@defaultSort
>
        <HeadTemplate>
            <GdsTableCell SortColumnName=""Task"">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DaysLeft"">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName=""Cost"">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName=""DueDate"">
                Due date
            </GdsTableCell>
            <GdsTableCell />
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in data!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString(""C"")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                    <GdsTableCell>
                        <GdsButton Type=""button"" Value=@rowData.id.ToString()>Edit</GdsButton>
                    </GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
")"
         CodeExampleContent="@(@"@code{
    private YourDataDomainClass[]? data;
    private TableSortArgs defaultSort = new TableSortArgs(""DaysLeft"", TableSortOrder.Ascending);

    protected override Task OnInitializedAsync()
    {
        //retrieve data from your data source using the same initial default sort options set on the table component
        data = await YourDataSource.GetDataAsync(defaultSort.Name, defaultSort.Order);
        base.OnInitializedAsync();
    }

    private async Task SortTableAsync(TableSortArgs args)
    {
        //retrieve data from your data source using the sort column name and order
        data = await YourDataSource.GetDataAsync(args.Name, args.Order);
    }
}")">
    <GdsTable CaptionText="Set initial sort column and order" IsSortable OnTableSort=@SortTable2 InitialSortOrder=@defaultSort>
        <HeadTemplate>
            <GdsTableCell SortColumnName="Task">
                Task
            </GdsTableCell>
            <GdsTableCell SortColumnName="DaysLeft">
                Days left
            </GdsTableCell>
            <GdsTableCell SortColumnName="Cost">
                Cost
            </GdsTableCell>
            <GdsTableCell SortColumnName="DueDate">
                Due date
            </GdsTableCell>
            <GdsTableCell />
        </HeadTemplate>
        <RowsTemplate>
            @foreach (var rowData in defaultSortedData!)
            {
                <GdsTableRow>
                    <GdsTableCell>@rowData.Task</GdsTableCell>
                    <GdsTableCell>@rowData.DaysLeft</GdsTableCell>
                    <GdsTableCell>@rowData.Cost.ToString("C")</GdsTableCell>
                    <GdsTableCell>@rowData.DueDate.ToShortDateString()</GdsTableCell>
                    <GdsTableCell>
                        <GdsButton Type="button" Value=@rowData.id.ToString()>Edit</GdsButton>
                    </GdsTableCell>
                </GdsTableRow>
            }
        </RowsTemplate>
    </GdsTable>
</Example>

@code {
    private DummyData[]? data;

    private async Task SortTableAsync(TableSortArgs args)
    {
        data = getData(args).ToArray();

        await Task.CompletedTask;
    }

    // set initial or default sort order and column
    private DummyData[]? defaultSortedData;
    private TableSortArgs defaultSort = new TableSortArgs("DaysLeft", TableSortOrder.Ascending);

    private void SortTable2(TableSortArgs args)
        => defaultSortedData = getData(args).ToArray();
    
    protected override void OnInitialized()
    {
        data = dummyDataSource.ToArray();
        defaultSortedData = getData(defaultSort).ToArray();

        base.OnInitialized();
    }

    #region "Dummy data source and structure"
    private List<DummyData> getData(TableSortArgs args) => args switch
    { 
        TableSortArgs { Order: TableSortOrder.Ascending, Name: "Task" } => dummyDataSource.OrderBy(d => d.Task).ToList(),
        TableSortArgs { Order: TableSortOrder.Descending, Name: "Task" } => dummyDataSource.OrderByDescending(d => d.Task).ToList(),
        TableSortArgs { Order: TableSortOrder.Ascending, Name: "DaysLeft" } => dummyDataSource.OrderBy(d => d.DaysLeft).ToList(),
        TableSortArgs { Order: TableSortOrder.Descending, Name: "DaysLeft" } => dummyDataSource.OrderByDescending(d => d.DaysLeft).ToList(),
        TableSortArgs { Order: TableSortOrder.Ascending, Name: "Cost" } => dummyDataSource.OrderBy(d => d.Cost).ToList(),
        TableSortArgs { Order: TableSortOrder.Descending, Name: "Cost" } => dummyDataSource.OrderByDescending(d => d.Cost).ToList(),
        TableSortArgs { Order: TableSortOrder.Ascending, Name: "DueDate" } => dummyDataSource.OrderBy(d => d.DueDate).ToList(),
        TableSortArgs { Order: TableSortOrder.Descending, Name: "DueDate" } => dummyDataSource.OrderByDescending(d => d.DueDate).ToList(),
        _ => dummyDataSource
    };

    private List<DummyData> dummyDataSource = new()
    {
        new(100, "Eligibility check", 4, 123.45M, DateTime.Parse("2025-02-10")),
        new(101, "Travel requirements", 15, 275.544M, DateTime.Parse("2025-08-22")),
        new(102, "Visa application", -22, 2784.22M, DateTime.Parse("2024-12-09")),
        new(103, "Family history", 33, 80.4M, DateTime.Parse("2025-03-31")),
        new(104, "Hotel arrangements", 77, 345.993M, DateTime.Parse("2025-04-22")),
        new(105, "Tourism", 22, 275.993M, DateTime.Parse("2025-02-22")),
        new(106, "Tourism", 22, 275.993M, DateTime.Parse("2025-02-22")),
    };

    private record DummyData(int id, string Task, int DaysLeft, decimal Cost, DateTime DueDate);
    #endregion
}
