@page "/Components/MultiFileUpload"
@using System.Web
@layout _ComponentsLayout

<PageTitle>Multi file upload</PageTitle>

<span class="govuk-caption-xl">Components</span>
<h1 class="govuk-heading-xl">Multi file upload</h1>

<p class="govuk-body">
    A blazor implementation of the MoJ GDS <a href="https://design-patterns.service.justice.gov.uk/components/multi-file-upload/" class="govuk-link">Multi file upload</a>.
</p>

<Example BlazorExampleContent="@(
    @"<GdsMultiFileUpload Id=""documents"" Name=""documents"" FileSelectedAsync=@LoadFilesAsync>
        <LabelTemplate>
            <GdsLabel Classes=@LabelSize.Medium>Upload a file</GdsLabel>
        </LabelTemplate>
    </GdsMultiFileUpload>")">
    <GdsMultiFileUpload Id="documents" Name="documents" FileSelectedAsync=@LoadFilesAsync>
        <LabelTemplate>
            <GdsLabel Classes=@LabelSize.Medium>Upload a file</GdsLabel>
        </LabelTemplate>
    </GdsMultiFileUpload>
</Example>

<p class="govuk-body">An example with errors to be displayed</p>

<Example BlazorExampleContent="@(
    @"<GdsMultiFileUpload Id=""documents"" Name=""documents"" FileSelectedAsync=@LoadFilesAsync>
        <LabelTemplate>
            <GdsLabel Classes=@LabelSize.Medium>Upload a file</GdsLabel>
        </LabelTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                @((MarkupString)string.Join(""<br>"", errors.Select(e => HttpUtility.HtmlEncode(e))))
            </GdsErrorMessage>
        </ErrorMessageTemplate>
    </GdsMultiFileUpload>")">
    <GdsMultiFileUpload Id="documents" Name="documents" FileSelectedAsync=@LoadFilesAsync>
        <LabelTemplate>
            <GdsLabel Classes=@LabelSize.Medium>Upload a file</GdsLabel>
        </LabelTemplate>
        <ErrorMessageTemplate>
            <GdsErrorMessage>
                @((MarkupString)string.Join("<br>", errors.Select(e => HttpUtility.HtmlEncode(e))))
            </GdsErrorMessage>
        </ErrorMessageTemplate>
    </GdsMultiFileUpload>
</Example>

@code {
	private List<string> errors = new List<string> { "Error message 1", "Error message 2" };

    private async Task LoadFilesAsync(FileUploadProgress e)
    {
        for(var i = 0; i <= 100; i += 10){
            e.UpdateProgress(i);
            await Task.Delay(1000);
        }
    }
}