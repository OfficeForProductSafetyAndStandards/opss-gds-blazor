name: CD for OPSS GDS Blazor Component Library

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY_PRIVATE_KEY }}
          fetch-depth: 0

      # Pull latest changes
      - name: Pull latest changes
        run: git pull origin develop

      # Setup .NET
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Increment the package version number
      - name: Increment version number
        id: increment_version
        working-directory: Opss.DesignSystem.Frontend.Blazor.Components
        run: |
          current_version=$(cat Opss.DesignSystem.Frontend.Blazor.Components.csproj | grep '<Version>' | sed -E 's/<\/?Version>//g' | xargs)
          new_version=$(echo $current_version | awk -F. '{print $1"."$2+1".0"}')
          sed -i "s/<Version>$current_version<\/Version>/<Version>$new_version<\/Version>/" Opss.DesignSystem.Frontend.Blazor.Components.csproj
          echo "Updated version to $new_version"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      # Build the solution
      - name: Build the solution
        run: dotnet build --no-restore --configuration Release

      # Pack the Components project
      - name: Pack Components project
        working-directory: Opss.DesignSystem.Frontend.Blazor.Components
        run: dotnet pack Opss.DesignSystem.Frontend.Blazor.Components.csproj --configuration Release --output ./artifacts
      
      - name: LS
        run: ls -l

      # Push package to NuGet
      - name: Push package to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        working-directory: Opss.DesignSystem.Frontend.Blazor.Components/artifacts
        run: |
          dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY

      # Check if the file has changed before committing
      - name: Commit and push changes
        working-directory: .
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Opss.DesignSystem.Frontend.Blazor.Components/Opss.DesignSystem.Frontend.Blazor.Components.csproj
          git commit -m "Update version number" || echo "No changes to commit"
          git push origin HEAD:develop


      # Create a new release
      - name: Create a release
        run: gh release create $VERSION --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.increment_version.outputs.new_version }}
