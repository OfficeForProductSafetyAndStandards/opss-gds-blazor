@inherits GdsViewModel

<div class="govuk-form-group @(ErrorMessageTemplate != null ? "govuk-form-group--error" : "") @FormGroupClasses">
    @if (LabelTemplate != null)
    {
        @LabelTemplate
    }
    @if (HintTemplate != null)
    {
        @HintTemplate
    }
    @if (ErrorMessageTemplate != null)
    {
        @ErrorMessageTemplate
    }

    @if (PrefixTemplate != null || SuffixTemplate != null)
    {
        <div class="govuk-input__wrapper">
            @if (PrefixTemplate != null)
            {
                @PrefixTemplate
            }

            <input id="@Id" class="govuk-input @Classes @(ErrorMessageTemplate != null ? "govuk-input--error" : "")" name="@Name" type="@(Type ?? "text")"
                   spellcheck="@Spellcheck?.ToString().ToLower()" value="@Value" aria-describedby="@DescribedBy?.Trim()"
                   autocomplete="@Autocomplete" pattern="@Pattern" inputmode="@Inputmode" @attributes="@Attributes" />

            @if (SuffixTemplate != null)
            {
                @SuffixTemplate
            }
        </div>
    }
    else
    {
        <input id="@Id" class="govuk-input @Classes @(ErrorMessageTemplate != null ? "govuk-input--error" : "")" name="@Name" type="@(Type ?? "text")"
               spellcheck="@Spellcheck?.ToString().ToLower()" value="@Value" aria-describedby="@DescribedBy?.Trim()"
               autocomplete="@Autocomplete" pattern="@Pattern" inputmode="@Inputmode" @attributes="@Attributes" />
    }
</div>

@code {
    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Type of input control to render, for example, a password input control.
    /// </summary>
    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public string? Inputmode
    {
        get => _inputmode;
        set
        {
            _inputmode = value;
            if (_inputmode == "numeric")
            {
                Spellcheck = false;
            }
        }
    }

    /// <summary>
    /// Optional initial value of the input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    private string? _describedBy;
    private string? _inputmode;

    /// <summary>
    /// One or more element IDs to add to the aria-describedby attribute, used to provide additional descriptive information for screenreader users.
    /// </summary>
    [Parameter]
    public string? DescribedBy
    {
        get
        {
            var fullText = _describedBy ?? "";
            if (HintTemplate != null) fullText += $" {Id}-hint";
            if (ErrorMessageTemplate != null) fullText += $" {Id}-error";
            return string.IsNullOrWhiteSpace(fullText) ? null : fullText;
        }
        set => _describedBy = value;
    }

    [Parameter]
    public RenderFragment? LabelTemplate { get; set; }
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }
    [Parameter]
    public RenderFragment? PrefixTemplate { get; set; }
    [Parameter]
    public RenderFragment? SuffixTemplate { get; set; }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// Attribute to identify input purpose, for instance "postal-code" or "username".
    /// </summary>
    [Parameter]
    public string? Autocomplete { get; set; }

    /// <summary>
    /// Attribute to provide a regular expression pattern, used to match allowed character combinations for the input value.
    /// </summary>
    [Parameter]
    public string? Pattern { get; set; }

    /// <summary>
    /// Optional field to enable or disable the spellcheck attribute on the input.
    /// </summary>
    [Parameter]
    public bool? Spellcheck { get; set; }
}