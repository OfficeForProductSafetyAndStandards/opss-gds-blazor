@inherits GdsViewModel

@* <summary>
    Use the text input component when you need to let users enter text that’s no 
    longer than a single line, such as their name or phone number.
</summary> *@

<div class="govuk-form-group @(ErrorMessageTemplate != null ? "govuk-form-group--error" : "") @FormGroupClasses"
     @attributes=@FormGroupAttributes>
    @if (LabelTemplate != null)
    {
        <CascadingValue Value=@Id>
            @LabelTemplate
        </CascadingValue>
    }
    @if (HintTemplate != null)
    {
        <CascadingValue Value=@Id>
            @HintTemplate
        </CascadingValue>
    }
    @if (ErrorMessageTemplate != null)
    {
        <CascadingValue Value=@Id>
            @ErrorMessageTemplate
        </CascadingValue>
    }

    @if (PrefixTemplate != null || SuffixTemplate != null)
    {
        <div class="govuk-input__wrapper @InputWrapperClasses">
            @if (PrefixTemplate != null)
            {
                @PrefixTemplate
            }

            <input id=@Id
                   class="govuk-input @Classes @(ErrorMessageTemplate != null ? "govuk-input--error" : "")" 
                   name=@Name
                   type=@(Type ?? "text")
                   spellcheck=@Spellcheck?.ToString().ToLower()
                   aria-describedby=@describedBy?.Trim()
                   autocomplete=@Autocomplete
                   pattern=@Pattern
                   inputmode=@Inputmode
                   value=@Value
                   disabled=@Disabled
                   autocapitalize=@Autocapitalize
                   @oninput=OnValueChanged
                   @attributes=@Attributes
            />

            @if (SuffixTemplate != null)
            {
                @SuffixTemplate
            }
        </div>
    }
    else
    {
        <input id=@Id
               class="govuk-input @Classes @(ErrorMessageTemplate != null ? "govuk-input--error" : "")" 
               name=@Name
               type=@(Type ?? "text")
               spellcheck=@spellcheck
               aria-describedby=@describedBy?.Trim()
               autocomplete=@Autocomplete
               pattern=@Pattern
               inputmode=@Inputmode
               value=@Value
               disabled=@Disabled
               autocapitalize=@Autocapitalize
               @oninput=OnValueChanged
               @attributes=@Attributes
        />
    }
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Required. The Id of the input.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Type of input control to render, for example, a password input control.
    /// </summary>
    [Parameter]
    public string? Type { get; set; }

    /// <summary>
    /// none, text, decimal, numeric, tel, search, email, url
    /// </summary>
    [Parameter]
    public string? Inputmode { get; set; }

    /// <summary>
    /// Value of the input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// If true, input will be disabled.
    /// </summary>
    [Parameter]
    public bool? Disabled { get; set; }

    /// <summary>
    /// One or more element IDs to add to the aria-describedby attribute,
    /// used to provide additional descriptive information for screenreader
    /// users.
    /// </summary>
    [Parameter]
    public string? DescribedBy { get; set; }

    /// <summary>
    /// The label used by the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? LabelTemplate { get; set; }

    /// <summary>
    /// Can be used to add a hint to the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    /// <summary>
    /// Can be used to add an error message to the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }

    /// <summary>
    /// Can be used to add a prefix to the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? PrefixTemplate { get; set; }

    /// <summary>
    /// Can be used to add a suffix to the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? SuffixTemplate { get; set; }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// HTML attributes (for example data attributes) to add to the form group.
    /// </summary>
    [Parameter]
    [SuppressMessage("Usage", "CA2227:Collection properties should be read only", Justification = "Component parameters should have a public setter")]
    public Dictionary<string, object>? FormGroupAttributes { get; set; } = new Dictionary<string, object>();

    /// <summary>
    /// Attribute to identify input purpose, for instance "postal-code" or "username".
    /// </summary>
    [Parameter]
    public string? Autocomplete { get; set; }

    /// <summary>
    /// Attribute to provide a regular expression pattern, used to match allowed character combinations
    /// for the input value.
    /// </summary>
    [Parameter]
    public string? Pattern { get; set; }

    /// <summary>
    /// Optional field to enable or disable the spellcheck attribute on the input.
    /// </summary>
    [Parameter]
    public bool? Spellcheck { get; set; }

    /// <summary>
    /// Optional field to enable or disable autocapitalisation of user input.
    /// "default", "none", "sentences", "words", "characters"
    /// </summary>
    [Parameter]
    public string? Autocapitalize { get; set; }

    /// <summary>
    /// Classes to add to the wrapping element.
    /// </summary>
    [Parameter]
    public string? InputWrapperClasses { get; set; }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();

        return ValueChanged.InvokeAsync(Value);
    }
    #endregion

    #region Private Properties
    private string? spellcheck
    {
        get
        {
            if (Spellcheck != null)
                return Spellcheck?.ToString().ToLower();

            if (Inputmode == "numeric")
                return false.ToString().ToLower();

            return Spellcheck?.ToString().ToLower();
        }
    }

    private string? describedBy
    {
        get
        {
            var fullText = DescribedBy;
            if (HintTemplate != null) fullText += $" {Id}-hint";
            if (ErrorMessageTemplate != null) fullText += $" {Id}-error";
            return string.IsNullOrWhiteSpace(fullText) ? null : fullText;
        }
    }
    #endregion
}