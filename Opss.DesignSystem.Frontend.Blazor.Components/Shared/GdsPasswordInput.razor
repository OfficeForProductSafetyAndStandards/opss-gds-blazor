@inherits GdsViewModel

@* <summary>
    Help users to create and enter passwords.
</summary> *@

<div class="govuk-form-group govuk-password-input @(ErrorMessageTemplate != null ? "govuk-form-group--error" : "") @FormGroupClasses"
     data-testid=@DataTestId
     data-module="govuk-password-input"
     data-i18n.show-password=@ShowPasswordText
     data-i18n.hide-password=@HidePasswordText
     data-i18n.show-password-aria-label=@ShowPasswordAriaLabelText
     data-i18n.hide-password-aria-label=@HidePasswordAriaLabelText
     data-i18n.password-shown-announcement=@PasswordShownAnnouncementText
     data-i18n.password-hidden-announcement=@PasswordHiddenAnnouncementText
     @attributes=@FormGroupAttributes
>
    @if (LabelTemplate != null)
    {
        <CascadingValue Value=@Id>
            @LabelTemplate
        </CascadingValue>
    }
    @if (HintTemplate != null)
    {
        <CascadingValue Value=@Id>
            @HintTemplate
        </CascadingValue>
    }
    @if (ErrorMessageTemplate != null)
    {
        <CascadingValue Value=@Id>
            @ErrorMessageTemplate
        </CascadingValue>
    }

    <div class="govuk-input__wrapper govuk-password-input__wrapper">
        @if (BeforeInputTemplate != null)
        {
            @BeforeInputTemplate
        }
        <input class="govuk-input govuk-password-input__input govuk-js-password-input-input @(ErrorMessageTemplate != null ? "govuk-input--error" : "") @Classes"
               id=@Id
               name=@Name
               type="password" 
               spellcheck="false" 
               autocomplete=@Autocomplete
               autocapitalize="none"
               disabled=@Disabled?.ToString().ToLower()
               aria-describedby=@describedBy?.Trim()
               value=@Value
               data-testid=@InputDataTestId
               @oninput=OnValueChanged
               @attributes=@Attributes
        >

        <button type="button" 
                class="govuk-button govuk-button--secondary govuk-password-input__toggle govuk-js-password-input-toggle @ButtonClasses"
                data-module="govuk-button"
                aria-controls=@Id
                aria-label=@(ShowPasswordAriaLabelText ?? "Show password")
                hidden=""
        >
            @(ShowPasswordText ?? "Show")
        </button>
        @if (AfterInputTemplate != null)
        {
            @AfterInputTemplate
        }
    </div>
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Required. The ID of the input.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Applies the supplied value to the input's data-testid attribute
    /// </summary>
    [Parameter]
    public string? InputDataTestId { get; set; }

    /// <summary>
    /// Required. The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Value of the input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// If true, input will be disabled.
    /// </summary>
    [Parameter]
    public bool? Disabled { get; set; }

    /// <summary>
    /// One or more element IDs to add to the aria-describedby
    /// attribute, used to provide additional descriptive
    /// information for screenreader users.
    /// </summary>
    [Parameter]
    public string? DescribedBy { get; set; }

    /// <summary>
    /// The label used by the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? LabelTemplate { get; set; }

    /// <summary>
    /// Can be used to add a hint to a text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    /// <summary>
    /// Can be used to add an error message to the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// HTML attributes (for example data attributes) to add to the form group.
    /// </summary>
    [Parameter]
    public Dictionary<string, object>? FormGroupAttributes { get; set; } = new Dictionary<string, object>();

    /// <summary>
    /// Content to add before the input used by the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? BeforeInputTemplate { get; set; }

    /// <summary>
    /// Content to add after the input used by the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? AfterInputTemplate { get; set; }

    /// <summary>
    /// Attribute to identify input purpose. 
    /// Default is "current-password".
    /// </summary>
    [Parameter]
    public string Autocomplete { get; set; } = "current-password";

    /// <summary>
    /// Button text when the password is hidden. Defaults to "Show".
    /// </summary>
    [Parameter]
    public string? ShowPasswordText { get; set; }

    /// <summary>
    /// Button text when the password is visible. Defaults to "Hide".
    /// </summary>
    [Parameter]
    public string? HidePasswordText { get; set; }

    /// <summary>
    /// Button text exposed to assistive technologies, like
    /// screen readers, when the password is hidden. Defaults to
    /// "Show password".
    /// </summary>
    [Parameter]
    public string? ShowPasswordAriaLabelText { get; set; }

    /// <summary>
    /// Button text exposed to assistive technologies, like
    /// screen readers, when the password is visible. Defaults
    /// to "Hide password".
    /// </summary>
    [Parameter]
    public string? HidePasswordAriaLabelText { get; set; }

    /// <summary>
    /// Announcement made to screen reader users when their
    /// password has become visible in plain text. Defaults
    /// to "Your password is visible".
    /// </summary>
    [Parameter]
    public string? PasswordShownAnnouncementText { get; set; }

    /// <summary>
    /// Announcement made to screen reader users when their
    /// password has been obscured and is not visible. Defaults
    /// to "Your password is hidden".
    /// </summary>
    [Parameter]
    public string? PasswordHiddenAnnouncementText { get; set; }

    /// <summary>
    /// Classes to add to the button.
    /// </summary>
    [Parameter]
    public string? ButtonClasses { get; set; }
    #endregion

    #region Private Properties
    private string? describedBy
    {
        get
        {
            var fullText = DescribedBy;
            if (HintTemplate != null) fullText += $" {Id}-hint";
            if (ErrorMessageTemplate != null) fullText += $" {Id}-error";
            return string.IsNullOrWhiteSpace(fullText) ? null : fullText;
        }
    }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();

        return ValueChanged.InvokeAsync(Value);
    }
    #endregion
}
