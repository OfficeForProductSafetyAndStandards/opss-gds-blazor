@inherits GdsWithContent

@* <summary>
    The accordion component lets users show and hide sections of related content on a page.
</summary> *@

<div id=@Id
     class="govuk-accordion @Classes" 
     data-testid=@DataTestId
     data-module="govuk-accordion" 
     @attributes=@Attributes>
    <div class="govuk-accordion__controls">
        <button type="button"
                class="govuk-accordion__show-all"
                aria-expanded=@(allItemsExpanded ? "true" : "false")
                @onclick=@ToggleExpandAll>
            <span class="govuk-accordion-nav__chevron@(allItemsExpanded ? "" : " govuk-accordion-nav__chevron--down")"></span>
            <span class="govuk-accordion__show-all-text">@(allItemsExpanded ? HideAllSectionsText : ShowAllSectionsText)</span>
        </button>
    </div>
    <CascadingValue Value=this>
        @ChildContent
    </CascadingValue>
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Required. Must be unique across the domain of your service if
    /// rememberExpanded is true (as the expanded state of individual
    /// instances of the component persists across page loads using
    /// session storage). Used as an id in the HTML for the accordion
    /// as a whole, and also as a prefix for the ids of the section
    /// contents and the buttons that open them, so that those ids can
    /// be the target of aria-control attributes.
    /// </summary>
    [Parameter]
    public required string Id { get; set; }

    /// <summary>
    /// Whether the expanded/collapsed state of the accordion 
    /// should be saved when a user leaves the page and restored
    /// when they return. Default is true.
    /// </summary>
    [Parameter]
    public bool? RememberExpanded { get; set; }

    /// <summary>
    /// The text content of the ‘Hide all sections’ button at the 
    /// top of the accordion when all sections are expanded.
    /// </summary>
    [Parameter]
    public string? HideAllSectionsText { get; set; } = "Hide all sections";

    /// <summary>
    /// The text content of the ‘Hide’ button within each section
    /// of the accordion, which is visible when the section is expanded.
    /// </summary>
    [Parameter]
    public string? HideSectionText { get; set; } = "Hide";

    /// <summary>
    /// Text made available to assistive technologies, like screen-readers, 
    /// as the final part of the toggle’s accessible name when the section
    /// is expanded. Defaults to "Hide this section".
    /// </summary>
    [Parameter]
    public string? HideSectionAriaLabelText { get; set; } = "Hide this section";

    /// <summary>
    /// The text content of the ‘Show all sections’ button at the top
    /// of the accordion when at least one section is collapsed.
    /// </summary>
    [Parameter]
    public string? ShowAllSectionsText { get; set; } = "Show all sections";

    /// <summary>
    /// The text content of the ‘Show’ button within each section of 
    /// the accordion, which is visible when the section is collapsed.
    /// </summary>
    [Parameter]
    public string? ShowSectionText { get; set; } = "Show";

    /// <summary>
    /// Text made available to assistive technologies, like screen-readers,
    /// as the final part of the toggle’s accessible name when the section
    /// is collapsed. Defaults to "Show this section".
    /// </summary>
    [Parameter]
    public string? ShowSectionAriaLabelText { get; set; } = "Show this section";

    [Parameter]
    public Dictionary<int, bool> ItemStates { get; set; } = new();

    [Parameter]
    public EventCallback<Dictionary<int, bool>> OnItemStatesChanged { get; set; }
    #endregion

    #region Event Handlers 
    private async Task ToggleExpandAll()
    {
        allItemsExpanded = !allItemsExpanded;

        if(rememberExpanded)
            ItemStates.Clear();

        items.ForEach(i => 
        { 
            i.SetExpanded(allItemsExpanded); 

            if(rememberExpanded)
                ItemStates.Add(i.Index, i.GetExpanded());
        });

        if (rememberExpanded)
            await OnItemStatesChanged.InvokeAsync(ItemStates);
    }

    internal async Task SaveItemState(int index, bool expanded)
    {
        allItemsExpanded = GetAllItemsExpanded();

        if (rememberExpanded)
        {
            ItemStates[index] = expanded;
            await OnItemStatesChanged.InvokeAsync(ItemStates);
        }

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) 
        { 
            allItemsExpanded = GetAllItemsExpanded();
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private bool GetAllItemsExpanded() => items.All(i => i.GetExpanded() == true);
    #endregion

    #region Private Properties 
    private bool rememberExpanded
    {
        get
        {
            return RememberExpanded ?? false;
        }
    }

    private bool allItemsExpanded { get; set; }
    #endregion

    #region Parameter Validation
    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(Id))
            throw new ArgumentNullException(nameof(Id), "GdsAccordion must have an Id");

        if (string.IsNullOrWhiteSpace(HideAllSectionsText))
            throw new ArgumentNullException(nameof(HideAllSectionsText), "GdsAccordion must have text for the ‘Hide all sections’ button");

        if (string.IsNullOrWhiteSpace(ShowAllSectionsText))
            throw new ArgumentNullException(nameof(ShowAllSectionsText), "GdsAccordion must have text for the ‘Show all sections’ button");

        if (string.IsNullOrWhiteSpace(HideSectionText))
            throw new ArgumentNullException(nameof(HideSectionText), "GdsAccordion must have text for the ‘Hide’ buttons");

        if (string.IsNullOrWhiteSpace(ShowSectionText))
            throw new ArgumentNullException(nameof(ShowSectionText), "GdsAccordion must have text for the ‘Show’ buttons");

        if (string.IsNullOrWhiteSpace(HideSectionAriaLabelText))
            throw new ArgumentNullException(nameof(HideSectionAriaLabelText), "GdsAccordion must have text for the ‘Hide this section’ aria label text");

        if (string.IsNullOrWhiteSpace(ShowSectionAriaLabelText))
            throw new ArgumentNullException(nameof(ShowSectionAriaLabelText), "GdsAccordion must have text for the ‘Show this section’ aria label text");

        base.OnParametersSet();
    }
    #endregion

    #region Cascading Value - Child Items
    private List<GdsAccordionItem> items = new List<GdsAccordionItem>();

    internal void AddItem(GdsAccordionItem item)
    {
        item.Index = items.Count + 1;
        item.SetExpanded(
            ItemStates.ContainsKey(item.Index)
                ? ItemStates[item.Index]
                : (item.Expanded ?? false)
        );
        items.Add(item);
        StateHasChanged();
    }
    #endregion
}
