@inherits GdsWithContent

@* <summary>
    The accordion item component must be used as a child of the accordion component.
    The sections within the accordion.
</summary> *@

<div class="govuk-accordion__section@(expanded ? " govuk-accordion__section--expanded" : "")"
data-testid=@DataTestId>
    <div class="govuk-accordion__section-header">
        <GdsHeading HeadingLevel=@HeadingLevel Classes="govuk-accordion__section-heading">
            <button type="button" 
            aria-controls="@(Parent?.Id)-content-@Index" 
            class="govuk-accordion__section-button" 
            aria-expanded=@expanded
            aria-label=@sectionAriaLabelText
            @onclick=@ToggleExpand
            >
                <span class="govuk-accordion__section-heading-text" id="@(Parent?.Id)-heading-@Index">
                    <span class="govuk-accordion__section-heading-text-focus">
                        @Heading
                    </span>
                </span>
                <span class="govuk-visually-hidden govuk-accordion__section-heading-divider">, </span>
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <span id="@(Parent?.Id)-summary-@Index" class="govuk-accordion__section-summary govuk-body">
                        <span class="govuk-accordion__section-summary-focus">
                            @Summary
                        </span>                         
                    </span>
                    <span class="govuk-visually-hidden govuk-accordion__section-heading-divider">, </span>
                }
                <span class="govuk-accordion__section-toggle">
                    <span class="govuk-accordion__section-toggle-focus">
                        <span class="govuk-accordion-nav__chevron@(expanded ? "" : " govuk-accordion-nav__chevron--down")"></span>
                        <span class="govuk-accordion__section-toggle-text">@sectionButtonText</span>
                    </span>
                </span>
            </button>
        </GdsHeading>
    </div>
    @if(expanded)
    {
        <div id="@(Parent?.Id)-content-@Index" 
        class="govuk-accordion__section-content"
        >
            @ChildContent
        </div>
    }
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Heading level, from 1 to 6.
    /// </summary>
    [Parameter]
    public int HeadingLevel { get; set; } = 2;

    /// <summary>
    /// Required. The title of each section.
    /// </summary>
    [Parameter]
    public string? Heading { get; set; }

    /// <summary>
    /// The content for the summary line.
    /// The summary line is inside the HTML &lt;button&gt; element, so you can only add phrasing content to it.
    /// </summary>
    [Parameter]
    public string? Summary { get; set; }

    /// <summary>
    /// Sets whether the section should be expanded when the page loads for the first time.
    /// </summary>
    [Parameter]
    public bool? Expanded { get; set; }
    #endregion

    #region Public Properties
    /// <summary>
    /// Set by the parent to identify this element's index
    /// </summary>
    public int Index { get; set; }
    #endregion

    #region Event Handlers 
    private void ToggleExpand()
    {
        expanded = !expanded;
        Parent?.SaveItemState(this.Index, expanded);
    }

    /// <summary>
    /// Sets the expanded state
    /// </summary>
    internal void SetExpanded(bool value) => expanded = value;

    /// <summary>
    /// Gets the expanded state
    /// </summary>
    internal bool GetExpanded() => expanded;
    #endregion 

    #region Private Properties 
    private string sectionButtonText
    {
        get
        {
            return (expanded ? Parent?.HideSectionText! : Parent?.ShowSectionText!);
        }
    }

    private string sectionAriaLabelText
    {
        get
        {
            return $"{Heading}, {(expanded ? Parent?.HideSectionAriaLabelText! : Parent?.ShowSectionAriaLabelText!)}";
        }
    }

    private bool expanded;
    #endregion

    #region Parameter Validation
    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(Heading))
            throw new ArgumentNullException(nameof(Heading), "GdsAccordionItem must have a heading");

        if (HeadingLevel < 1 || HeadingLevel > 6)
            throw new ArgumentOutOfRangeException(nameof(HeadingLevel), "Heading level must have a value between 1 and 6");

        if (ChildContent == null)
            throw new ArgumentNullException(nameof(ChildContent), "GdsAccordionItem must have child content");

        base.OnParametersSet();
    }
    #endregion

    #region Cascading Value - Parent
    protected override void OnInitialized()
    {
        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "GdsAccordionItem must exist within a GdsAccordion");

        expanded = Expanded ?? false;

        base.OnInitialized();
        Parent.AddItem(this);
    }

    [CascadingParameter]
    private GdsAccordion? Parent { get; set; }
    #endregion
}
