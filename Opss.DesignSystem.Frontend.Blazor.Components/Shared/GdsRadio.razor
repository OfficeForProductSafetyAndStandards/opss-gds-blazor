@using System.Diagnostics.CodeAnalysis
@inherits GdsWithContent

@* <summary>
    The radio item within the radios component.
</summary> *@

<div class="govuk-radios__item"
     data-testid=@DataTestId>
    <input class="govuk-radios__input" 
           id=@id
           name=@Parent?.Name
           type="radio" 
           value=@Value
           disabled=@Disabled
           checked=@isChecked
           data-aria-controls=@conditionalId
           aria-describedBy=@describedBy?.Trim()
           data-testid=@InputDataTestId
           @oninput=RadioChanged
           @attributes=@Attributes
    >
    <label class="govuk-label govuk-radios__label @LabelClasses"
           for=@id
           @attributes=@LabelAttributes>
        @if (Text != null)
            @Text
        else
            @ChildContent

    </label>
    @if(HintTemplate != null)
    {
        <CascadingValue Value=@hintId>
            @HintTemplate
        </CascadingValue>
    }
</div>
@if (ConditionalTemplate != null)
{
    <div id=@conditionalId
         class="govuk-radios__conditional @(isChecked == true ? "" : "govuk-radios__conditional--hidden")"
         data-testid=@conditionalDataTestId>
        @ConditionalTemplate
    </div>
}

@code {
    #region
    /// <summary>
    /// Specific ID attribute for the radio item. If omitted,
    /// then idPrefix string will be applied.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Applies the supplied value to the input's data-testid attribute
    /// </summary>
    [Parameter]
    public string? InputDataTestId { get; set; }

    /// <summary>
    /// Required. Value for the radio input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// Text to use within each radio item label.
    /// </summary>
    [Parameter]
    public string? Text { get; set; }

    /// <summary>
    /// Can be used to add a hint to each radio item within the
    /// radios component.
    /// </summary>
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    /// <summary>
    /// Whether the radio should be checked when the page loads.
    /// Takes precedence over the top-level value option.
    /// </summary>
    [Parameter]
    public bool? Checked { get; set; }

    /// <summary>
    /// Provide additional content to reveal when the radio is checked.
    /// </summary>
    [Parameter]
    public RenderFragment? ConditionalTemplate { get; set; }

    /// <summary>
    /// If true, radio will be disabled.
    /// </summary>
    [Parameter]
    public bool? Disabled { get; set; }

    /// <summary>
    /// Classes to add to the label tag.
    /// </summary>
    [Parameter]
    public string? LabelClasses { get; set; }

    /// <summary>
    /// HTML attributes (for example data attributes) to add to the label tag.
    /// </summary>
    [Parameter]
    [SuppressMessage("Usage", "CA2227:Collection properties should be read only", Justification = "Component parameters should have a public setter")]
    public Dictionary<string, object>? LabelAttributes { get; set; } = new Dictionary<string, object>();
    #endregion

    #region Public Properties
    /// <summary>
    /// Set by the parent to identify this element's index
    /// </summary>
    public int Index { get; set; }

    /// <summary>
    /// Mark the checkbox as checked.
    /// </summary>
    public void Check() => isChecked = true;

    /// <summary>
    /// Mark the item as unchecked.
    /// </summary>
    public void UnCheck() => isChecked = false;
    #endregion

    #region Event Handlers
    private Task RadioChanged(ChangeEventArgs e)
    {
        return Parent!.OnRadioChanged(Value);
    }
    #endregion

    #region Private Properties
    private string? id
    {
        get
        {
            if (!string.IsNullOrEmpty(Id))
                return Id;

            var id = Parent?.IdPrefix ?? Parent?.Name;
            if (Index == 1)
            {
                return id;
            }
            else
            {
                return id + "-" + Index;
            }
        }
    }

    private string hintId
    {
        get
        {
            return id + "-item";
        }
    }

    private string? conditionalId
    {
        get
        {
            if (ConditionalTemplate == null) return null;

            return $"conditional-{id}";
        }
    }

    private string? conditionalDataTestId
    {
        get
        {
            if (DataTestId == null) return null;

            return $"conditional-{DataTestId}";
        }
    }

    private string? describedBy
    {
        get
        {
            var fullText = "";
            if (HintTemplate != null) fullText += $" {id}-item-hint";
            return string.IsNullOrWhiteSpace(fullText) ? null : fullText.Trim();
        }
    }

    private bool? isChecked;
    #endregion

    #region Cascading Value - Parent
    protected override void OnInitialized()
    {
        isChecked = Checked;

        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "GdsRadio must exist within a GdsRadios");

        Parent.Register(this);

        base.OnInitialized();
    }

    [CascadingParameter]
    private GdsRadios? Parent { get; set; }
    #endregion
}
