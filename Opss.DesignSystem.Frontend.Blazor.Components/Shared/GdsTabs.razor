@using Microsoft.AspNetCore.Components.Routing
@inherits GdsWithContent
@implements IDisposable
@inject NavigationManager Nav

<div id="@Id" class="govuk-tabs @Classes" @attributes="@Attributes">
    <h2 class="govuk-tabs__title">@Title</h2>
    <ul class="govuk-tabs__list" role="tablist">
        @foreach (var panel in Panels)
        {
            <li class="govuk-tabs__list-item @GetActivePanelCss(panel)" role="presentation">
                <a id="tab_@panel.Id"
                   @ref="@Ref"
                   class="govuk-tabs__tab"
                   role="tab"
                   aria-controls="@panel.Id"
                   aria-selected="@(panel == ActivePanel ? "true" : "false")"
                   tabindex="@(panel == ActivePanel ? "0" : "-1")"
                   @onclick="() => HandleClick(panel)"
                   @onclick:preventDefault="true"
                   @onkeydown="args => HandleKeyDown(panel, args)"
                   @onkeydown:preventDefault="true"
                   href="@(Nav.ToBaseRelativePath($"{Nav.Uri}#{panel.Id}"))">
                    @panel.Label
                </a>
            </li>
        }
    </ul>
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>



@code {
    /// <summary>
    /// Sets the ID of the tabs component
    /// </summary>
    [Parameter]
    public string? Id { get; set; }
    
    /// <summary>
    /// Optional prefix. This is used to prefix the ID of each tab panel, separated by '-'.
    /// </summary>
    [Parameter]
    public string? IdPrefix { get; set; }
    
    /// <summary>
    /// Sets the title of the tabs component table of contents
    /// </summary>
    [Parameter]
    public string? Title { get; set; }
    
    internal GdsTabsPanel ActivePanel { get; private set; }

    internal List<GdsTabsPanel> Panels { get; } = [];
    
    private List<ElementReference> _refs = [];
    internal ElementReference Ref { set => _refs.Add(value); }

    internal void AddPanel(GdsTabsPanel panel)
    {
        //todo: throw exception if no id or idprefix
        Panels.Add(panel);
        if (Panels[0] == panel)
        {
            ActivePanel = panel;
        }
        panel.Id ??= $"{IdPrefix}-{Panels.Count}";
        
        StateHasChanged();
    }

    private string GetActivePanelCss(GdsTabsPanel panel)
    {
        return panel == ActivePanel ? "govuk-tabs__list-item--selected" : "";
    }
    
    private void HandleClick(GdsTabsPanel panel)
    {
        if (ActivePanel == panel)
        {
            return;
        }
        ActivePanel = panel;
        CreateHistoryEntry();
    }

    private async Task HandleKeyDown(GdsTabsPanel panel, KeyboardEventArgs args)
    {
        var index = Panels.IndexOf(panel);
        switch (args.Key)
        {
            case "ArrowRight" or "Right":
                if (index < Panels.Count - 1)
                {
                    ActivePanel = Panels[index + 1];
                    await SetFocusToActivePanel();
                    CreateHistoryEntry();
                }
                
                break;
                
            case "ArrowLeft" or "Left":
                if (index > 0)
                {
                    ActivePanel = Panels[index - 1];
                    await SetFocusToActivePanel();
                    //await InvokeAsync(CreateHistoryEntry);
                    CreateHistoryEntry();
                }

                break;
        }
    }

    private async Task SetFocusToActivePanel()
    {
        var index = Panels.IndexOf(ActivePanel);
        await _refs[index].FocusAsync();
    }
    
    private void CreateHistoryEntry()
    {
        var panelId = ActivePanel.Id;
        ActivePanel.Id = "";
        StateHasChanged();
        Nav.NavigateTo($"{Nav.Uri}#{panelId}");
        
        ActivePanel.Id = panelId;
        StateHasChanged();
    }
    
    // navigation
    private string _pageUrl;
    protected override void OnInitialized()
    {
        Nav.LocationChanged += HandleLocationChanged;
        _pageUrl = Nav.Uri;
        base.OnInitialized();   
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // do nothing if navigating to a different page
        var pageUrlParts = _pageUrl.Split('#');
        var pageUrlWithoutHash = pageUrlParts[0];
        if (!e.Location.Contains(pageUrlWithoutHash)) return;
        
        var newUrlParts = e.Location.Split('#');
        if (newUrlParts.Length > 1) // if there is a #panel-id in the new url
        {
            var panelId = newUrlParts[1];
            var panel = Panels.FirstOrDefault(p => p.Id == panelId);
            if (panel != null)
            {
                ActivePanel = panel;
                SetFocusToActivePanel().GetAwaiter().GetResult();
                StateHasChanged();
            }
        }
        else
        {
            ActivePanel = Panels[0];
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
    }
}