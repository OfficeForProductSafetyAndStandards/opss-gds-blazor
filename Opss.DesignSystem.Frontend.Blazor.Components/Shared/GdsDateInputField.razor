@inherits GdsWithContent

<div class="govuk-date-input__item">
    <div class="govuk-form-group">
        <label class="govuk-label govuk-date-input__label"
               for=@id>
            @if (ChildContent == null)
            {
                @labelText
            }
            else
            {
                @ChildContent
            }
        </label>
        <input id="@id"
               class=@classes
               name=@name
               type="text"
               inputmode="numeric"
               autocomplete=@Autocomplete
               pattern=@Pattern
               value=@Value
               @oninput=OnValueChanged
               @attributes=@Attributes>
    </div>
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Item-specific ID. If provided, it will be used 
    /// instead of the generated ID.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// If set, the error classes will be set
    /// </summary>
    [Parameter]
    public bool? HasError { get; set; }

    /// <summary>
    /// Set the part of the date to input.
    /// </summary>
    [Parameter]
    public DateInputFieldType? DatePart { get; set; }

    /// <summary>
    /// Value of the input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// Attribute to identify input purpose, for instance "bday-day".
    /// </summary>
    [Parameter]
    public string? Autocomplete { get; set; }

    /// <summary>
    /// Attribute to provide a regular expression pattern, used to match 
    /// allowed character combinations for the input value.
    /// </summary>
    [Parameter]
    public string? Pattern { get; set; }

    /// <summary>
    /// Item-specific name attribute. If provided, will override
    /// the name generated by the parent date input control
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Item-specific label text. If provided, this will be used 
    /// instead of name for item label text.
    /// </summary>
    [Parameter]
    public string? Label{ get; set; }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();

        return ValueChanged.InvokeAsync(Value);
    }
    #endregion

    #region Private Properties
    private string id
    {
        get
        {
            if (Id != null)
                return Id;

            return $"{Parent.Id}-{datePartText.ToLower()}";
        }
    }

    private string name
    {
        get
        {
            if (Name != null)
                return Name;

            return $"{Parent.NamePrefix}-{datePartText?.ToLower()}";
        }
    }

    private string labelText
    {
        get
        {
            if (Label != null)
                return Label;
            if (Name != null)
                return Name;

            return datePartText;
        }
    }

    private string classes
    {
        get
        {
            var classBuilder = "govuk-input govuk-date-input__input";
            if (datePartClass != null)
                classBuilder += $" {datePartClass}";
            if (Classes != null)
                classBuilder += $" {Classes}";
            if (HasError.HasValue && HasError.Value)
                classBuilder += " govuk-input--error";
            return classBuilder;
        }
    }

    private string datePartClass
    {
        get
        {
            switch (DatePart)
            {
                case DateInputFieldType.Day:
                case DateInputFieldType.Month:
                    return "govuk-input--width-2";
                case DateInputFieldType.Year:
                    return "govuk-input--width-4";
                default:
                    return "";
            }
        }
    }

    private string datePartText
    {
        get
        {
            switch (DatePart)
            {
                case DateInputFieldType.Day:
                    return "Day";
                case DateInputFieldType.Month:
                    return "Month";
                case DateInputFieldType.Year:
                    return "Year";
                default:
                    return "";
            }
        }
    }
    #endregion

    #region Cascading Value - Parent
    protected override void OnInitialized()
    {
        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "GdsDateInputField must exist within a GdsDateInput");

        base.OnInitialized();
    }

    [CascadingParameter]
    private GdsDateInput Parent { get; set; }
    #endregion
}
