@inherits GdsWithContent

@* <summary>
    Let users select one or more options by using the checkboxes component.
</summary> *@
<div class="govuk-form-group @(HasError ? "govuk-form-group--error" : "") @FormGroupClasses" @attributes=@Attributes>
    <fieldset class="govuk-fieldset" role="@Role" aria-describedby="@describedBy">
        @if (LegendTemplate != null)
        {
            @LegendTemplate
        }
        @if (HintTemplate != null)
        {
            <CascadingValue Value="@id">
                @HintTemplate
            </CascadingValue>
        }
        @if (ErrorTemplate != null)
        {
            <CascadingValue Value="@id">
                @ErrorTemplate
            </CascadingValue>
        }
        <div class="govuk-checkboxes @Classes" data-module="govuk-checkboxes">
            ﻿   <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </div>
    </fieldset>
</div>

@code {
    [Parameter]
    public bool HasError { get; set; }

    private string? id
    {
        get
        {
            return Id;
        }
    }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// One or more element IDs to add to the aria-describedby attribute, used to provide additional descriptive information for screenreader users.
    /// </summary>
    [Parameter]
    public string? DescribedBy { get; set; }

    private string? describedBy
    {
        get
        {
            var describedBy = new List<string>();
            if (DescribedBy != null)
            {
                return DescribedBy;
            }
            if (HintTemplate != null)
            {
                describedBy.Add(id + "-hint");
            }
            if (ErrorTemplate != null)
            {
                describedBy.Add(id + "-error");
            }
            if (describedBy.Any())
                return string.Join(" ", describedBy);
            else return null;
        }
    }

    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Optional ARIA role attribute.
    /// </summary>
    [Parameter]
    public string? Role { get; set; }

    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    [Parameter]
    public RenderFragment? ErrorTemplate { get; set; }

    [Parameter]
    public RenderFragment? LegendTemplate { get; set; }

    /// <summary>
    /// Track the child checkboxes
    /// </summary>
    private List<GdsCheckbox> checkboxes = new List<GdsCheckbox>();

    /// <summary>
    /// Track the number of dividers to allow checkbox id values to be
    /// correctly calculated.
    /// </summary>
    private int dividerCount = 0;

    public void Register(GdsCheckbox checkbox)
    {
        checkboxes.Add(checkbox);
        checkbox.Index = checkboxes.Count + dividerCount;
    }

    public void Register(GdsCheckboxDivider divider)
    {
        dividerCount = dividerCount + 1;
    }
}