@inherits GdsWithContent

@* <summary>
    Let users select one or more options by using the checkboxes component.
</summary> *@
<div class="govuk-form-group @(ErrorMessageTemplate != null ? "govuk-form-group--error" : "") @FormGroupClasses"
     @attributes=@Attributes>
    <GdsFieldset Role=@Role
                 DescribedBy=@describedBy?.Trim()>
        <LegendTemplate>
            @LegendTemplate
        </LegendTemplate>
        <ChildContent>
            @if (HintTemplate != null)
            {
                <CascadingValue Value=@Id>
                    @HintTemplate
                </CascadingValue>
            }
            @if (ErrorMessageTemplate != null)
            {
                <CascadingValue Value=@Id>
                    @ErrorMessageTemplate
                </CascadingValue>
            }
            <div class="govuk-checkboxes @Classes"
                 data-module="govuk-checkboxes">
                <CascadingValue Value=this>
                    @ChildContent
                </CascadingValue>
            </div>
        </ChildContent>
    </GdsFieldset>
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Can be used to add a hint to the checkboxes component.
    /// </summary>
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    /// <summary>
    /// Can be used to add an error message to the checkboxes component.
    /// </summary>
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }

    /// <summary>
    /// The legend for the fieldset component.
    /// </summary>
    [Parameter]
    public RenderFragment? LegendTemplate { get; set; }

    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Optional ARIA role attribute.
    /// </summary>
    [Parameter]
    public string? Role { get; set; }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// One or more element IDs to add to the aria-describedby attribute, used to provide additional descriptive information for screenreader users.
    /// </summary>
    [Parameter]
    public string? DescribedBy { get; set; }

    /// <summary>
    /// The list of values of the checked checkboxes
    /// </summary>
    [Parameter]
    public List<string>? Values { get; set; }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<List<string>> ValuesChanged { get; set; }

    public Task CheckboxChanged(bool isChecked, string value)
    {
        if (Values == null) return Task.CompletedTask;

        if (!isChecked && Values.Contains(value))
        {
            Values.Remove(value);
        }
        else if (isChecked)
        {
            Values.Add(value);
        }
        return ValuesChanged.InvokeAsync(Values);
    }
    #endregion

    #region Private Properties
    private string? describedBy
    {
        get
        {
            var describedBy = new List<string>();
            if (DescribedBy != null)
                return DescribedBy;

            if (HintTemplate != null)
                describedBy.Add(Id + "-hint");
            if (ErrorMessageTemplate != null)
                describedBy.Add(Id + "-error");

            if (describedBy.Any())
                return string.Join(" ", describedBy);
            else
                return null;
        }
    }
    #endregion

    #region Cascading Value - Child Items
    private List<GdsCheckbox> checkboxes = new List<GdsCheckbox>();

    /// <summary>
    /// Track the number of dividers to allow checkbox id values to be
    /// correctly calculated.
    /// </summary>
    private int dividerCount = 0;

    public void Register(GdsCheckbox checkbox)
    {
        checkboxes.Add(checkbox);
        checkbox.Index = checkboxes.Count + dividerCount;
    }

    public void Register(GdsCheckboxDivider divider)
    {
        dividerCount = dividerCount + 1;
    }
    #endregion
}