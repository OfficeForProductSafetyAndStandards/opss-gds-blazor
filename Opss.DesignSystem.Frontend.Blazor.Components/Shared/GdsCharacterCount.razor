@inherits GdsViewModel

@* <summary>
    Only use the character count component when there is a good reason for
    limiting the number of characters users can enter.
</summary> *@

<div class=@classes
     data-module="govuk-character-count"
     data-maxlength=@MaxLength
     data-threshold=@Threshold
     data-maxwords=@MaxWords>
    @if (LabelTemplate != null)
    {
        <CascadingValue Value=@Id>
            @LabelTemplate
        </CascadingValue>
    }
    @if (HintTemplate != null)
    {
        <CascadingValue Value=@Id>
            @HintTemplate
        </CascadingValue>
    }
    @if (ErrorMessageTemplate != null)
    {
        <CascadingValue Value=@Id>
            @ErrorMessageTemplate
        </CascadingValue>
    }

    <textarea id=@Id
              class=@textAreaClasses
              name=@Name
              rows=@(Rows ?? 5)
              spellcheck=@Spellcheck?.ToString().ToLower()
              aria-describedby=@describedBy
              autocomplete=@Autocomplete
              @oninput="OnValueChanged"
              @attributes=@Attributes
    >
        @Value
    </textarea>
    <GdsHint OverrideId=@(Id + "-info")
             Classes=@("govuk-character-count__message " + CountMessageClasses ?? "")>
        @remainingCharacterHintText
    </GdsHint>
</div>
@code {
    #region Public Parameters
    /// <summary>
    /// The label used by the character count component.
    /// </summary>
    [Parameter]
    public RenderFragment? LabelTemplate { get; set; }

    /// <summary>
    /// Can be used to add a hint to the character count component.
    /// </summary>
    [Parameter]
    public RenderFragment? HintTemplate { get; set; }

    /// <summary>
    /// Can be used to add an error message to the character count component.
    /// </summary>
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }

    /// <summary>
    /// The maximum number of characters.
    /// If <c>MaxWords</c> is provided, the <c>MaxLength</c> option will be ignored.
    /// </summary>
    [Parameter]
    public int? MaxLength { get; set; }

    /// <summary>
    /// The maximum number of words.
    /// If <c>MaxWords</c> is provided, the <c>MaxLength</c> option will be ignored.
    /// </summary>
    [Parameter]
    public int? MaxWords { get; set; }

    /// <summary>
    /// The percentage value of the limit at which point the count message is displayed.
    /// If this attribute is set, the count message will be hidden by default.
    /// </summary>
    [Parameter]
    public int? Threshold { get; set; }

    /// <summary>
    /// Classes to add to the count message.
    /// </summary>
    [Parameter]
    public string? CountMessageClasses { get; set; }
    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Optional number of textarea rows.
    /// </summary>
    [Parameter]
    public int? Rows { get; set; }

    /// <summary>
    /// Optional initial value of the input.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// One or more element IDs to add to the aria-describedby attribute, used to provide
    /// additional descriptive information for screenreader users.
    /// </summary>
    [Parameter]
    public string? DescribedBy { get; set; }

    /// <summary>
    /// Classes to add to the form group (for example to show error state for the whole group).
    /// </summary>
    [Parameter]
    public string? FormGroupClasses { get; set; }

    /// <summary>
    /// Attribute to identify input purpose, for instance "postal-code" or "username".
    /// </summary>
    [Parameter]
    public string? Autocomplete { get; set; }

    /// <summary>
    /// Optional field to enable or disable the spellcheck attribute on the input.
    /// </summary>
    [Parameter]
    public bool? Spellcheck { get; set; }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value.ToString();

        return ValueChanged.InvokeAsync(Value);
    }
    #endregion

    #region Private Properties
    private string remainingCharacterHintText
    {
        get
        {
            return $"You can enter up to {MaxWords ?? MaxLength ?? 0} " + (MaxWords.HasValue ? "words" : "characters");
        }
    }

    private string? describedBy
    {
        get
        {
            var fullText = DescribedBy ?? "";
            fullText += $" {Id}-info";
            if (HintTemplate != null) fullText += $" {Id}-hint";
            if (ErrorMessageTemplate != null) fullText += $" {Id}-error";
            return string.IsNullOrWhiteSpace(fullText) ? null : fullText.Trim();
        }
    }

    private string classes
    {
        get
        {
            var classBuilder = "govuk-form-group govuk-character-count";
            if (ErrorMessageTemplate != null)
                classBuilder += " govuk-form-group--error";
            if (FormGroupClasses != null)
                classBuilder += $" {FormGroupClasses}";
            return classBuilder;
        }
    }

    private string textAreaClasses
    {
        get
        {
            var classBuilder = "govuk-textarea govuk-js-character-count";
            if (Classes != null)
                classBuilder += $" {Classes}";
            if (ErrorMessageTemplate != null)
                classBuilder += " govuk-textarea--error";
            return classBuilder;
        }
    }
    #endregion
}