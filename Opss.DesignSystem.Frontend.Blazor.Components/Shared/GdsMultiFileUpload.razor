@using Microsoft.AspNetCore.Components.Forms
@inherits GdsViewModel

@* <summary>
    Use the multi file upload component to help users upload multiple files at
    the same time, on a regular basis. For example, in a caseworking system.
</summary> *@

<div class="moj-multi-file-upload">
    <div class="moj-multi-file__uploaded-files">
        <h2 class="govuk-heading-m">Files added</h2>
        <div class="govuk-summary-list moj-multi-file-upload__list">
            @foreach (var file in _allFiles)
            {
                <div class="govuk-summary-list__row moj-multi-file-upload__row">
                    <div class="govuk-summary-list__value moj-multi-file-upload__message">
                        <span class="moj-multi-file-upload__filename">@file.FileName</span>
                        <span class="moj-multi-file-upload__progress"> @file.ProgressPercent%</span>
                    </div>
                    <div class="govuk-summary-list__actions moj-multi-file-upload__actions"></div>
                </div>
            }
        </div>
    </div>

    <div class="moj-multi-file-upload__upload">

        <div class="govuk-form-group @(ErrorMessageTemplate != null ? "govuk-form-group--error" : "")">
            @if (LabelTemplate != null)
            {
                <CascadingValue Value=@Id>
                    @LabelTemplate
                </CascadingValue>
            }
            @if (ErrorMessageTemplate != null)
            {
                <CascadingValue Value=@Id>
                    @ErrorMessageTemplate
                </CascadingValue>
            }
            <div class="moj-multi-file-upload__dropzone">
                <InputFile OnChange="@LoadFilesAsync" class="govuk-file-upload moj-multi-file-upload__input" id=@Id name=@Name multiple @attributes=@Attributes />
                <p class="govuk-body">Drag and drop files here or</p><label for=@Id class="govuk-button govuk-button--secondary">Choose files</label>
                <div aria-live="polite" role="status" class="govuk-visually-hidden">
                    @if (_fileUploading)
                    {
                        @_fileUploadingMessage
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    #region Public Parameters
    /// <summary>
    /// Required. The Id of the input.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// The name of the input, which is submitted with the form data.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// The label used by the text input component.
    /// </summary>
    [Parameter]
    public RenderFragment? LabelTemplate { get; set; }

    /// <summary>
    /// Can be used to add an error message to the radios component.
    /// </summary>
    [Parameter]
    public RenderFragment? ErrorMessageTemplate { get; set; }
    #endregion

    #region Private Properties
    private bool _fileUploading = false;
    private string _fileUploadingMessage = "Uploading files, please wait";
    private List<FileUploadProgress> _allFiles = [];
    #endregion

    #region Event Handlers
    /// <summary>
    /// Event triggered by a file being selected or dragged into the file upload box.
    /// </summary>
    [Parameter]
    public EventCallback<FileUploadProgress> FileSelectedAsync { get; set; }

    /// <summary>
    /// Handle the files being uploaded.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        List<FileUploadProgress> uploadingFiles = [];
        if (e.FileCount == 1)
        {
            var progress = new FileUploadProgress(e.File, UpdateState);
            _allFiles.Add(progress);
            uploadingFiles.Add(progress);
        }
        else
        {
            var files = e.GetMultipleFiles();
            foreach (var file in files)
            {
                var progress = new FileUploadProgress(file, UpdateState);
                _allFiles.Add(progress);
                uploadingFiles.Add(progress);
            }
        }
        _fileUploading = true;
        StateHasChanged();

        await Task.WhenAll(
            uploadingFiles.Select(progress => FileSelectedAsync.InvokeAsync(progress))
        );

        _fileUploading = false;
        StateHasChanged();
    }

    private void UpdateState(){
        StateHasChanged();
    }
    #endregion
}
