@inherits GdsViewModel

@*<summary>
    The table component makes information easier to compare and scan.
</summary>*@

<table class="@tableClasses" 
    aria-label=@Label
    @attributes=@Attributes
>
    @if(!string.IsNullOrWhiteSpace(CaptionText)) 
    {
        <caption class="@captionClasses">
            @CaptionText
        </caption>
    }

    @if (HeadTemplate != null)
    {
        <thead class=@TableClasses.Head>
            <tr class=@TableClasses.Row>
                <CascadingValue Value=this Name="ParentTable" ChildContent=@HeadTemplate />
            </tr>
        </thead>
    }
    <tbody class=@TableClasses.Body>
        <CascadingValue Value=this ChildContent=@RowsTemplate />
    </tbody>
</table>

@code {
    #region Public Parameters
    /// <summary>
    /// Table caption text (text only)
    /// </summary>
    [Parameter]
    public string? CaptionText { get; set; }

    /// <summary>
    /// The aria-label attribute to add to the table. 
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Table caption text classes, as specified in TableClasses.
    /// </summary>
    [Parameter]
    public string? CaptionTextClasses { get; set; }

    /// <summary>
    /// If true, the first cell in each row of the table body will be a header.
    /// </summary>
    [Parameter]
    public bool FirstCellIsHeader { get; set; }

    /// <summary>
    /// If true, the sort functionality is enabled. 
    /// The <see cref="GdsTable.OnTableSort" /> event handler, and the <see cref="GdsTableCell.SortColumnName" /> on the table cells in the table header must be set.
    /// </summary>
    [Parameter]
    public bool IsSortable { get; set; }

    /// <summary>
    /// The initial/default sort order to apply to the table. 
    /// </summary>
    /// <remarks>
    /// The same sort order must be applied to the data source in the initial/default state as well.
    /// </remarks>
    [Parameter]
    public TableSortArgs? InitialSortOrder { get; set; }

    /// <summary>
    /// Table cells for the head row
    /// </summary>
    [Parameter]
    public RenderFragment? HeadTemplate { get; set; }

    /// <summary>
    /// Table rows for the table body
    /// </summary>
    [Parameter]
    public RenderFragment? RowsTemplate { get; set; }
    #endregion

    #region Event Handlers
    [Parameter]
    public EventCallback<TableSortArgs> OnTableSort { get; set; }

    internal void SetSortOrder(TableSortArgs args)
    {
        if (string.IsNullOrEmpty(args.Name)) return;
        sortOrders[args.Name] = args.Order;    
    }

    internal string? GetSortOrder(string columnName)
    { 
        if (string.IsNullOrEmpty(columnName)) return null;
        return sortOrders[columnName];
    }

    internal void ClearAllSortOrders()
    {
        foreach (string key in sortOrders.Keys)
        { 
            sortOrders[key] = TableSortOrder.None;        
        }
    }
    #endregion

    #region Private Properties
    /// <summary>
    /// Current sorting orders for all sort columns in the table.
    /// </summary>
    private Dictionary<string, string> sortOrders = new();

    private string captionClasses
    {
        get
        {
            var classBuilder = TableClasses.Caption;

            if (!string.IsNullOrWhiteSpace(CaptionTextClasses))
                classBuilder += $" {CaptionTextClasses}";

            return classBuilder;
        }
    }

    private string tableClasses
    {
        get
        {
            var classBuilder = TableClasses.Table;

            if (!string.IsNullOrWhiteSpace(Classes))
                classBuilder += $" {Classes}";

            return classBuilder;
        }
    }
    #endregion
}
